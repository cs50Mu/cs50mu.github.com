<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法 | The Hard Way Is Easier]]></title>
  <link href="http://cs50Mu.github.io/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://cs50Mu.github.io/"/>
  <updated>2020-03-16T11:29:06+08:00</updated>
  <id>http://cs50Mu.github.io/</id>
  <author>
    <name><![CDATA[linuxfish]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[binary search and spreadsheet numeration]]></title>
    <link href="http://cs50Mu.github.io/blog/2014/09/18/binary-search-and-spreadsheet-numeration/"/>
    <updated>2014-09-18T18:54:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2014/09/18/binary-search-and-spreadsheet-numeration</id>
    <content type="html"><![CDATA[<p>昨天去知道创宇的面试失败了，很感谢他们能给我这个机会。通过这次面试，我总算迈出了一步，更加明确了自己应该努力的方向。这次面试反映出的一个很严重的问题就是，手太生，学了这么长时间Python，竟然连一些常用的用法，命令都得现查文档。自己反思一下，没有自己动手写多少代码，这个是问题的关键。</p>

<p>面试我的雨哥人非常nice，面对我这么菜的表现没有一点不耐烦，他说的一句话让我印象深刻，“既然是有兴趣，平时就多花点时间，对得起兴趣这两个字”。我会的。</p>

<h2>二分法查找</h2>

<p>我想这个应该是最容易理解的算法了吧，我差点就在面试的时候完成了，well,almost&hellip;</p>

<p>思路很简单，因为给出的列表已经是排好顺序的了，因此直接找到中间的一个记为mid，若是要找的元素，任务完成。若mid比要找的元素大，好的，那么要找的元素肯定在start跟mid之间了，若mid比要找的元素小，那么要找的元素肯定在mid和end之间了。</p>

<p>```python binary-search
def binarySearch(lst, element, start, end):</p>

<pre><code>mid = (start + end)/2 
if element == lst[mid]:
    print 'Found, %d' % mid 
elif mid == start:
    if element == lst[mid+1]:  # 主要处理两个相邻的数的情况，这种情形下mid必然等于start
        print 'Found, %d' % (mid+1) # 因此如果end（也就是mid+1）不等于element的话，则没找到
    else:
        print 'Not found'
elif element &gt; lst[mid]:
    return binarySearch(lst, element, mid, end)
elif element &lt; lst[mid]:
    return binarySearch(lst, element, start, mid)
</code></pre>

<p>def binarySearch2(lst, element, start, end):</p>

<pre><code>mid = (start + end)/2
if element == lst[mid]:
    return 'Found, %d' % mid 
elif start &gt; end:
    return 'Not found'
elif element &lt; lst[mid]:
    return binarySearch2(lst, element, start, mid-1)
elif element &gt; lst[mid]:
    return binarySearch2(lst, element, mid+1, end)
</code></pre>

<p>def binarySearch3(lst, element):</p>

<pre><code>start = 0 
end = len(lst) - 1
while (start &lt;= end):
    mid = (start + end)/2
    if lst[mid] == element:
        return 'Found', mid
    elif lst[mid] &gt; element:
        end = mid - 1
    elif lst[mid] &lt; element:
        start = mid + 1
return 'Not found'
</code></pre>

<p>```</p>

<p>上面的方法一是我自己瞎想的ugly思路，方法三是我在一站式C编程上看到的，方法二是我根据方法三的思路用递归改写的</p>

<h2>spreadsheet numeration</h2>

<p>这个题目其实我之前在CodeForces上做过的，可惜没有理解它的真谛，虽然当时误打误撞做出来了，还是没有效果，现在遇到还是不会做，面试中雨哥一句话点醒我，“进制转换”，是啊，这个问题实质上就是十进制转换26进制的问题。那进制转换无非就是要做除法、取余。但是也不是这么简单，有一个比较tricky的问题，就是在转换26的倍数的时候，需要做一些特殊处理才行。</p>

<p>```python spreadsheet-numeration
def numTochar(num):</p>

<pre><code>result = ''
ori = num 
while num:
    mod = num % 26
    if mod == 0:
        mod = 26
        num = num/26 - 1 # special cases for 'Z' 
    else:
        num /= 26
    result = chr(mod + ord('A') - 1) + result
return result,ori
</code></pre>

<p>def numTochar2(num):</p>

<pre><code>result = ''
ori = num 
while num:
    mod = num % 26
    if mod == 0:
        mod = 26
    num -= 1       # a more elegant solution
    num /= 26
    result = chr(mod + ord('A') - 1) + result
return result,ori
</code></pre>

<p>```</p>

<p>方法一是我自己捣鼓的，方法二是我在CodeForces上看到了，效果应该是一样的，都是为了在转换26的倍数的时候能够得出正确的结果，做出的一点特殊处理，不过显然后者更加优雅，每个数在除26之前先减1,这样既对于非26倍数的数没有影响，又能巧妙的处理26的倍数时的特殊情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[归并排序的非递归算法]]></title>
    <link href="http://cs50Mu.github.io/blog/2013/07/03/merge-sort/"/>
    <updated>2013-07-03T21:24:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2013/07/03/merge-sort</id>
    <content type="html"><![CDATA[<p>归并排序的效率很高，复杂度只有NlogN，但想起来很费劲啊。。尤其是递归算法，绕来绕去的被绕晕了。。今天在看《Python编程实践》（Practical Programming-An Introduction to Computer Science Using Python）时看到一个归并排序的非递归算法，很好理解，记录下。</p>

<pre><code>def merge(L1,L2):
    """Merge sorted lists L1 and L2 and return the result."""
    mergedlist = []
    i1 = i2 = 0 
    while i1 != len(L1) and i2 != len(L2):
    if L1[i1] &lt;= L2[i2]:
        mergedlist.append(L1[i1])
        i1 += 1
    else:
        mergedlist.append(L2[i2])
        i2 += 1

    mergedlist.extend(L1[i1:])
    mergedlist.extend(L2[i2:])
    return mergedlist

def mergesort(L):
    """Sort L."""

    workspace = []
    for i in range(len(L)):
    workspace.append([L[i]])

    count = 0
    while count &lt; len(workspace)-1:
    newList = merge(workspace[count],workspace[count+1])
    print newList
    workspace.append(newList)
    count += 2

    return workspace[-1][:]
</code></pre>

<p>归并排序的基本思想是这样的，从归并两个字来看我们知道这种算法是通过合并子序列来实现的，普通的乱序序列肯定是不行的，但对于两个已经排好序的序列，很容易把它们合并成一个有序的序列，这就是第一个函数merge的作用。你会问：这有什么用啊？离我们的目标还差很远嘛！我们怎么可能从一个无序的序列变出两个有序的序列嘛？别急，这里用到了二分法的思想（so-called devide and conquer），不断的把问题二分化，直到最简单的情形，在这里也就是单个元素了，两个单个元素肯定是两个有序的序列啊！可以用merge函数来合并它们为一个含有两个元素的有序序列，那么第二个函数mergesort的作用就是：首先把无序列表分解成含有N个含单个元素的小列表，然后依次两两合并这些小列表，并把合并后的有序列表添加到这个列表之后，直到最后合并成一个有序的列表。</p>

<p>额，表达能力太差了。。还是没有讲清楚</p>

<p>比如列表原来为[8,7,6,5,4]，那么它的变化为<code>[[8],[7],[6],[5],[4]]--&gt;[[8],[7],[6],[5],[4],[7,8]]--&gt;[[8],[7],[6],[5],[4],[7,8],[5,6]]--&gt;[[8],[7],[6],[5],[4],[7,8],[5,6],[4,7,8]]--&gt;[[8],[7],[6],[5],[4],[7,8],[5,6],[4,7,8],[4,5,6,7,8]]</code> <br/>
结果列表的最后一个内嵌列表就是已排好序的序列了。</p>
]]></content>
  </entry>
  
</feed>
