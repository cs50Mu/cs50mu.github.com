<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 读书笔记 | The Hard Way Is Easier]]></title>
  <link href="http://cs50Mu.github.io/blog/categories/du-shu-bi-ji/atom.xml" rel="self"/>
  <link href="http://cs50Mu.github.io/"/>
  <updated>2021-02-05T14:15:19+08:00</updated>
  <id>http://cs50Mu.github.io/</id>
  <author>
    <name><![CDATA[linuxfish]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「Applying UML and Patterns」读书笔记]]></title>
    <link href="http://cs50Mu.github.io/blog/2021/02/05/reading-notes-of-applying-uml-and-patterns/"/>
    <updated>2021-02-05T12:08:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2021/02/05/reading-notes-of-applying-uml-and-patterns</id>
    <content type="html"><![CDATA[<h2>「Applying UML and Patterns」读书笔记</h2>

<h3>Inception</h3>

<p>前期评估</p>

<p>the idea is to do just enough investigation to form a rational, justifiable opinion of the overall purpose and feasibility of the potential new system, and decide if it is worthwhile to invest in deeper exploration</p>

<p><strong>It is to decide if the project is worth a serious investigation (during elaboration), not to do that investigation.</strong></p>

<h4>Use Cases</h4>

<p>Informally, use cases are text stories of some actor using a system to meet goals.</p>

<p>the essence is discovering and recording functional requirements by writing stories of using a system to fulfill user goals; that is, cases of use</p>

<h3>Elaboration Iteration 1Basics &ndash; Domain Models</h3>

<h4>What is a Domain Model?</h4>

<p>A domain model is a visual representation of conceptual classes or real-situation objects in a domain.</p>

<p>Domain models have also been called conceptual models (the term used in the first edition of this book), domain object models, and analysis object models.</p>

<p>Applying UML notation, a domain model is illustrated <strong>with a set of class diagrams in which no operations (method signatures) are defined.</strong> It provides a conceptual perspective. It may show:</p>

<ul>
<li>domain objects or conceptual classes</li>
<li>associations between conceptual classes</li>
<li>attributes of conceptual classes</li>
</ul>


<p>A domain model shows real-situation conceptual classes, <strong>not software classes.</strong></p>

<h4>How to Find Conceptual Classes?</h4>

<ul>
<li>Reuse or modify existing models.</li>
<li>Use a category list. 一些默认建议，非常好</li>
<li>Finding Conceptual Classes with Noun Phrase Identification. 通过名词来找灵感

<ul>
<li><strong>use cases</strong> are one rich source to mine for noun phrase identification.</li>
</ul>
</li>
</ul>


<blockquote><p>Perhaps the most common mistake when creating a domain model is to represent something as an attribute when it should have been a conceptual class.</p></blockquote>

<p>If we do not think of some conceptual class X as a number or text in the real world, X is probably a conceptual class, not an attribute. 类比现实世界</p>

<h4>Why Use &lsquo;Description&rsquo; Classes?</h4>

<p><img src="/images/post/description-class.jpg" alt="" /></p>

<p>item的描述是一直存在的，但item可能会卖光</p>

<p>The need for description classes is common in sales, product, and service domains. It is also common in manufacturing, which requires a description of a manufactured thing that is distinct from the thing itself.</p>

<h4>Associations</h4>

<p>An association is a relationship between classes (more precisely, instances of those classes) that indicates some meaningful and interesting connection</p>

<p>Multiplicity defines how many instances of a class A can be associated with one instance of a class B</p>

<p><img src="/images/post/association-multiplicity.jpg" alt="" /></p>

<h4>Attributes</h4>

<p>An attribute is a logical data value of an object.</p>

<p>Informally, most attribute types should be what are often thought of as &ldquo;primitive&rdquo; data types, such as numbers and booleans. The type of an attribute should not normally be a complex domain concept, such as a Sale or Airport. 类属性应该是基础类型，不应该是复杂的自定义领域类型（这种应该用Association来表达）</p>

<p>Relate conceptual classes with an association, not with an attribute.</p>

<h4>Conclusion: Is the Domain Model Correct?</h4>

<p>There is no such thing as a single correct domain model. All models are approximations of the domain we are attempting to understand; the domain model is primarily a tool of understanding and communication among a particular group. A useful domain model captures the essential abstractions and information required to understand the domain in the context of the current requirements, and aids people in understanding the domainits concepts, terminology, and relationships. 没有“正确”的模型</p>

<h3>Elaboration Iteration 1Basics &ndash; System Sequence Diagrams</h3>

<h4>What are System Sequence Diagrams?</h4>

<p>A system sequence diagram is a picture that shows, for one particular scenario of a use case, the events that external actors generate, their order, and inter-system events. All systems are treated as a <strong>black box</strong>; the emphasis of the diagram is events that cross the system boundary from actors to systems.</p>

<p>System behavior is a description of what a system does, without explaining how it does it.  用于描述系统是做什么的，而不是如何做</p>

<h3>Elaboration Iteration 1Basics &ndash; Operation Contracts</h3>

<h3>Elaboration Iteration 1Basics &ndash; Requirements to DesignIteratively</h3>

<p>Iteratively Do the Right Thing, Do the Thing Right 做对的事 和 把事做对</p>

<p>The requirements and object-oriented analysis has focused on learning to do the right thing; that is, understanding some of the outstanding goals for the case studies, and related rules and constraints. By contrast, the following design work will stress do the thing right; that is, skillfully designing a solution to satisfy the requirements for this iteration.</p>

<h3>Elaboration Iteration 1Basics &ndash; Logical Architecture and UML Package Diagrams</h3>

<h4>What is the Logical Architecture? And Layers?</h4>

<p>The logical architecture is the large-scale organization of the software classes into packages (or namespaces), subsystems, and layers. <strong>It&rsquo;s called the logical architecture because there&rsquo;s no decision about how these elements are deployed across different operating system processes or across physical computers in a network</strong></p>

<p>A layer is a very coarse-grained grouping of classes, packages, or subsystems that has cohesive responsibility for a major aspect of the system. Also, layers are organized such that &ldquo;higher&rdquo; layers (such as the UI layer) call upon services of &ldquo;lower&rdquo; layers, but not normally vice versa.</p>

<p>Typically layers in an OO system include:</p>

<ul>
<li>User Interface.</li>
<li>Application Logic and Domain Objects 领域层</li>
<li>Technical Services

<ul>
<li>general purpose objects and subsystems that provide supporting technical services, such as interfacing with a database or error logging.</li>
<li>These services are usually application-independent and reusable across several systems.</li>
</ul>
</li>
</ul>


<blockquote><p>Guideline: Design with Layers</p></blockquote>

<p>Applied to information systems, <strong>typical layers</strong> are illustrated and explained as follows:</p>

<ul>
<li>UI</li>
<li>Application

<ul>
<li>handles presentation layer request</li>
<li>workflow</li>
<li>session state</li>
</ul>
</li>
<li>Domain (aka Business, Application logic)

<ul>
<li>implementation of domain rules</li>
</ul>
</li>
<li>Business Infrasture

<ul>
<li>very general low-level business services</li>
<li>used in many business domains</li>
<li>eg, CurrencyConverter</li>
</ul>
</li>
<li>Technial Services

<ul>
<li>(relatively) high-level technical services and frameworks</li>
<li>eg, persistence, security</li>
</ul>
</li>
<li>Foundation

<ul>
<li>low-level technical services, utilities and frameworks</li>
<li>eg, data structures, threads, math, file, DB and network I/O</li>
</ul>
</li>
</ul>


<blockquote><p>Guideline: Cohesive Responsibilities; Maintain a Separation of Concerns</p></blockquote>

<p>每层干自己该干的事</p>

<p>The responsibilities of the objects in a layer should be strongly related to each other and should not be mixed with responsibilities of other layers. For example, objects in the UI layer should focus on UI work, such as creating windows and widgets, capturing mouse and keyboard events, and so forth. Objects in the application logic or &ldquo;domain&rdquo; layer should focus on application logic, such as calculating a sales total or taxes, or moving a piece on a game board.</p>

<p>UI objects should not do application logic. For example, a Java Swing JFrame (window) object should not contain logic to calculate taxes or move a game piece. And on the other hand, application logic classes should not trap UI mouse or keyboard events. That would violate a clear separation of concerns and maintaining high cohesion basic architectural principles.</p>

<blockquote><p>How do we design the application logic with objects?</p></blockquote>

<p>To create software objects with names and information similar to the real-world domain, and <strong>assign application logic responsibilities to them</strong>. For example, in the real world of POS, there are sales and payments. So, in software, we create a Sale and Payment class, and give them application logic responsibilities.</p>

<blockquote><p>Guideline: The Model-View Separation Principle</p></blockquote>

<p>In this context, model is a synonym for the domain layer of objects (it&rsquo;s an old OO term from the late 1970s). View is a synonym for UI objects, such as windows, Web pages, applets, and reports.</p>

<p><strong>The Model-View Separation principle[2] states that model (domain) objects should not have direct knowledge of view (UI) objects, at least as view objects</strong>. So, for example, a Register or Sale object should not directly send a message to a GUI window object ProcessSaleFrame, asking it to display something, change color, close, and so forth.</p>

<p>Model-View-Controller (MVC): The Model is the Domain Layer, the View is the UI Layer, and the Controllers are the workflow objects in the Application layer. 至今看到的对MVC的最完美的诠释吧</p>

<h3>Elaboration Iteration 1Basics &ndash; On to Object Design</h3>

<h4>Designing Objects: What are Static and Dynamic Modeling?</h4>

<p>There are two kinds of object models: dynamic and static. <strong>Dynamic models, such as UML interaction diagrams (sequence diagrams or communication diagrams), help design the logic, the behavior of the code or the method bodies.</strong> They tend to be the more interesting, difficult, important diagrams to create. <strong>Static models, such as UML class diagrams, help design the definition of packages, class names, attributes, and method signatures (but not method bodies).</strong></p>

<p>People new to UML tend to think that the important diagram is the static-view class diagram, but in fact, most of the challenging, interesting, useful design work happens while drawing the UML dynamic-view interaction diagrams. It&rsquo;s during dynamic object modeling (such as drawing sequence diagrams) that &ldquo;the rubber hits the road&rdquo; in terms of really thinking through the exact details of what objects need to exist and how they collaborate via messages and methods. 重点：先做Dynamic Modeling（新手会误认为要先做Static Modeling）</p>

<p>What&rsquo;s important is knowing how to think and design in objects, and apply object design best-practice patterns, which is a very different and much more valuable skill than knowing UML notation. 重点是OO设计，而不是UML</p>

<h3>Elaboration Iteration 1Basics &ndash; UML Interaction Diagrams</h3>

<p>The term interaction diagram is a generalization of two more specialized UML diagram types:</p>

<ul>
<li>sequence diagrams

<ul>
<li>illustrate interactions in a kind of fence format, in which each new object is added to the right</li>
</ul>
</li>
<li>communication diagrams

<ul>
<li>illustrate object interactions in a graph or network format, in which objects can be placed anywhere on the diagram</li>
</ul>
</li>
</ul>


<p><img src="/images/post/sequence-diagram.jpg" alt="" />
<img src="/images/post/communication-diagram.jpg" alt="" /></p>

<h3>Elaboration Iteration 1Basics &ndash; UML Class Diagrams</h3>

<h3>Elaboration Iteration 1Basics &ndash; GRASP: Designing Objects with Responsibilities</h3>

<p><strong>The critical design tool for software development is a mind well educated in design principles.</strong> It is not the UML or any other technology.</p>

<blockquote><p>What Are Inputs to Object Design?</p></blockquote>

<p>开始设计的前提是已做好需求分析</p>

<blockquote><p>Responsibilities and Responsibility-Driven Design</p></blockquote>

<p>Basically, these responsibilities are of the following two types: doing and knowing.</p>

<p>Doing responsibilities of an object include:</p>

<ul>
<li>doing something itself, such as creating an object or doing a calculation</li>
<li>initiating action in other objects</li>
<li>controlling and coordinating activities in other objects</li>
</ul>


<p>Knowing responsibilities of an object include:</p>

<ul>
<li>knowing about private encapsulated data</li>
<li>knowing about related objects</li>
<li>knowing about things it can derive or calculate</li>
</ul>


<blockquote><p>What are Patterns?</p></blockquote>

<p>In OO design, a pattern is a named description of a problem and solution that can be applied to new contexts; ideally, a pattern advises us on how to apply its solution in varying circumstances and considers the forces and trade-offs.</p>

<p>New pattern should be considered an oxymoron if it describes a new idea. The very term &ldquo;pattern&rdquo; suggests a long-repeating thing. <strong>The point of design patterns is not to express new design ideas. Quite the oppositegreat patterns attempt to codify existing tried-and-true knowledge, idioms, and principles</strong>; the more honed, old, and widely used, the better.</p>

<blockquote><p>A Short Example of Object Design with GRASP</p></blockquote>

<p>There are nine GRASP patterns:</p>

<ul>
<li>Creator</li>
</ul>


<p>关键词：mental model、low representational gap (LRG)</p>

<p>原则是要尽量降低人的心理模型跟design model之间的认知差异</p>

<ul>
<li>Information Expert</li>
</ul>


<p>Problem： What is a basic principle by which to assign responsibilities to objects?</p>

<p>Solution： Assign a responsibility to the class that has the information needed to fulfill it.</p>

<ul>
<li>Low Coupling</li>
</ul>


<p>Briefly and informally, coupling is a measure of how strongly one element is connected to, has knowledge of, or depends on other elements.</p>

<p>If there is coupling or dependency, then when the depended-upon element changes, the dependant may be affected. For example, a subclass is strongly coupled to a superclass. An object A that calls on the operations of object B has coupling to B&rsquo;s services.</p>

<p>It is not high coupling per se that is the problem; it is high coupling to elements that are unstable in some dimension, such as their interface, implementation, or mere presence.  不是耦合本身不好，而要看耦合的东西，若耦合的东西不稳定就不太好</p>

<ul>
<li>Controller</li>
</ul>


<p>Problem：What first object beyond the UI layer receives and coordinates (&ldquo;controls&rdquo;) a system operation?</p>

<p>Solution： Assign the responsibility to an object representing one of these choices:</p>

<ol>
<li>Represents the overall &ldquo;system,&rdquo; a &ldquo;root object,&rdquo; a device that the software is running within, or a major subsystem (these are all variations of a facade controller).</li>
<li>Represents a use case scenario within which the system operation occurs (a use case or session controller)</li>
</ol>


<p>有两种：</p>

<p>Facade controllers：门面，一切全包，比如TelecommSwitch、Phone、ChessGame</p>

<p>use case controller：按使用场景来分的，比如ProcessSaleHandler</p>

<ul>
<li>High Cohesion</li>
</ul>


<p>In software design a basic quality known as cohesion informally measures how <strong>functionally related</strong> the operations of a software element are, and also measures how much work a software element is doing. 做的事要有相关性，一个类的方法集中如果有很多关系不大的事情，则这个类不是cohesive的</p>

<p>As a simple contrasting example, an object Big with 100 methods and 2,000 source lines of code (SLOC) is doing a lot more than an object Small with 10 methods and 200 source lines. <strong>And if the 100 methods of Big are covering many different areas of responsibility (such as database access and random number generation), then Big has less focus or functional cohesion than Small.</strong> In summary, both the amount of code and the relatedness of the code are an indicator of an object&rsquo;s cohesion.</p>

<p>Problem: How to keep objects focused, understandable, and manageable, and as a side effect, support Low Coupling?</p>

<p>Solution: Assign responsibilities so that cohesion remains high. Use this to evaluate alternatives.</p>

<h3>Elaboration Iteration 1Basics &ndash; Object Design Examples with GRASP</h3>

<p>I wish to exhaustively illustrate that no &ldquo;magic&rdquo; is needed in object design</p>

<p>OO software design really can be <strong>more science than art</strong>, though there is plenty of room for creativity and elegant design.</p>

<p>实例讲解，非常详尽！</p>

<blockquote><p>The Command-Query Separation Principle</p></blockquote>

<p>命令（有side effect的操作，比如update create等）与 查询 分离的原则</p>

<p>要这样：</p>

<p><code>java
// style #1; used in the official solution
public void roll()
{
faceValue = // random num generation
}
public int getFaceValue() {
   return faceValue;
}
</code>
而不是这样：</p>

<p><code>java
// style #2; why is this poor?
public int roll()
{
faceValue = // random num generation
   return faceValue;
}
</code></p>

<p>为什么呢？</p>

<p>CQS is widely considered desirable in computer science theory <strong>because with it, you can more easily reason about a program&rsquo;s state without simultaneously modifying that state. And it makes designs simpler to understand and anticipate.</strong> For example, if an application consistently follows CQS, you know that a query or getter method isn&rsquo;t going to modify anything and a command isn&rsquo;t going to return anything. Simple pattern. This often turns out to be nice to rely on, as the alternative can be a nasty surpriseviolating the Principle of <strong>Least Surprise</strong> in software development</p>

<h3>Elaboration Iteration 1Basics &ndash; Designing for Visibility</h3>

<p>Visibility is the ability of one object to see or have reference to another</p>

<p>There are four common ways that visibility can be achieved from object A to object B:</p>

<ul>
<li>Attribute visibility B is an attribute of A.</li>
<li>Parameter visibility B is a parameter of a method of A.</li>
<li>Local visibility B is a (non-parameter) local object in a method of A.</li>
<li>Global visibility B is in some way globally visible.</li>
</ul>


<h3>Elaboration Iteration 1Basics &ndash; Mapping Designs to Code</h3>

<h3>Elaboration Iteration 1Basics &ndash; Test-Driven Development and Refactoring</h3>

<p>Refactoring [Fowler99] is a structured, disciplined method to rewrite or restructure existing code without changing its external behavior, applying small transformation steps combined with re- executing tests each step.</p>

<h3>Elaboration Iteration 2 More Patterns &ndash; UML Tools and UML as Blueprint</h3>

<h3>Elaboration Iteration 2 More Patterns &ndash; Quick Analysis Update</h3>

<h3>Elaboration Iteration 2 More Patterns &ndash; Iteration 2More Patterns</h3>

<h3>Elaboration Iteration 2 More Patterns &ndash; More Objects with Responsibilities</h3>

<p>GRASP patterns:</p>

<ul>
<li>Polymorphism</li>
</ul>


<p>多态</p>

<p>Alternatives based on type Conditional variation is a fundamental theme in programs. If a program is designed using if-then-else or case statement conditional logic, then if a new variation arises, it requires modification of the case logicoften in many places. This approach makes it difficult to easily extend a program with new variations because changes tend to be required in several placeswherever the conditional logic exists. if-else 问题</p>

<p>原则：不要用if-else或者case来解决，而是用多态来解决</p>

<ul>
<li>Pure Fabrication</li>
</ul>


<p>Object-oriented designs are sometimes characterized by implementing as software classes representations of concepts in the real-world problem domain to lower the representational gap</p>

<p>Problem: What object should have the responsibility, when you do not want to violate High Cohesion and Low Coupling, or other goals, but solutions offered by Expert (for example) are not appropriate? there are many situations in which assigning responsibilities only to domain layer software classes leads to problems in terms of poor cohesion or coupling, or low reuse potential. 没办法跟Domain model（现实模型）对应上的object怎么设计？</p>

<p>Solution: Assign a highly cohesive set of responsibilities to <strong>an artificial or convenience class that does not represent a problem domain concept something made up</strong>, to support high cohesion, low coupling, and reuse.</p>

<ul>
<li>Indirection</li>
</ul>


<p>Most problems in computer science can be solved by another level of indirection</p>

<ul>
<li>Protected Variations</li>
</ul>


<p>Problem: How to design objects, subsystems, and systems so that the variations or instability in these elements does not have an undesirable impact on other elements?</p>

<p>Solution: Identify points of predicted variation or instability; <strong>assign responsibilities to create a stable interface around them</strong>.</p>

<p>虚拟机也是一个应用这个原则的例子</p>

<blockquote><p>The Liskov Substitution Principle (LSP)</p></blockquote>

<p>LSP [Liskov88] formalizes the principle of protection against variations in different implementations of an interface, or subclass extensions of a superclass.</p>

<p>Informally, software (methods, classes, &hellip;) that refers to a type T (some interface or abstract superclass) should work properly or as expected with any substituted implementation or subclass of Tcall it S.</p>

<blockquote><p>Law of Demeter</p></blockquote>

<p>Don&rsquo;t Talk to Strangers</p>

<p>违反<code>Law of Demeter</code>的代码示例：</p>

<p><code>java
public void doX()
{
F someF = foo.getA().getB().getC().getD().getE().getF();
// ...
}
</code></p>

<p><strong>The design is coupled to a particular structure of how objects are connected.</strong> The farther along a path the program traverses, the more fragile it is. Why? Because the object structure (the connections) may change.</p>

<p>Novice developers tend toward brittle designs, intermediate developers tend toward overly fancy and flexible, generalized ones (in ways that never get used). Expert designers choose with insight;  关键是这个度不好把握啊</p>

<blockquote><p>Open-Closed Principle</p></blockquote>

<p>OCP and PV are essentially two expressions of the same principle, with different emphasis</p>

<h3>Elaboration Iteration 2 More Patterns &ndash; Applying GoF Design Patterns</h3>

<blockquote><p>Adapter (GoF)</p></blockquote>

<p>Problem:  How to resolve incompatible interfaces, or provide a stable interface to similar components with different interfaces?</p>

<p>Solution: Convert the original interface of a component into another interface, through an intermediate adapter object.</p>

<blockquote><p>Factory</p></blockquote>

<p>The adapter raises a new problem in the design:</p>

<p>who creates the adapters? And how to determine which class of adapter to create, such as TaxMaster-Adapter or GoodAsGoldTaxProAdapter?</p>

<p>答案就是Factory</p>

<p>Problem: Who should be responsible for creating objects when there are special considerations, such as complex creation logic, a desire to separate the creation responsibilities for better cohesion, and so forth?</p>

<p>Solution: Create a Pure Fabrication object called a Factory that handles the creation.</p>

<p><img src="/images/post/factory.jpg" alt="" /></p>

<p>重点关注上图中，它是如何决定应该使用哪个Adapter的</p>

<p>Note that in the ServicesFactory, the logic to decide which class to create is resolved <strong>by reading in the class name from an external source (for example, via a system property if Java is used) and then dynamically loading the class.</strong> This is an example of a partial data-driven design.</p>

<blockquote><p>Singleton (GoF)</p></blockquote>

<p>The ServicesFactory raises another new problem in the design: Who creates the factory itself, and how is it accessed? 汗死。。。  按下葫芦起了瓢的感觉</p>

<p>观察</p>

<p>First, observe that only one instance of the factory is needed within the process. Second, quick reflection suggests that the methods of this factory may need to be called from various places in the code, as different places need access to the adapters for calling on the external services.</p>

<p>Problem: Exactly one instance of a class is allowedit is a &ldquo;singleton.&rdquo; Objects need a global and single point of access.</p>

<p>Solution: Define a static method of the class that returns the singleton.</p>

<p><img src="/images/post/singleton.jpg" alt="" /></p>

<blockquote><p>Strategy (GoF)</p></blockquote>

<p>Problem: How to design for varying, but related, algorithms or policies? How to design for the ability to change these algorithms or policies?</p>

<p>Solution: Define each algorithm/policy/strategy in a separate class, with a common interface.</p>

<blockquote><p>Composite (GoF)</p></blockquote>

<p>Problem：How to treat a group or composition structure of objects the same way (polymorphically) as a non-composite (atomic) object?</p>

<p>Solution: Define classes for composite and atomic objects so that they implement the same interface.</p>

<p>没有太理解清楚这个pattern</p>

<blockquote><p>Facade (GoF)</p></blockquote>

<p>Problem: A common, unified interface to a disparate set of implementations or interfacessuch as within a subsystemis required. There may be undesirable coupling to many things in the subsystem, or the implementation of the subsystem may change. What to do?</p>

<p>Solution: Define a single point of contact to the subsystema facade object that wraps the subsystem. This facade object presents a single unified interface and is responsible for collaborating with the subsystem components.</p>

<blockquote><p>Observer (Publish-Subscribe)</p></blockquote>

<p>Problem: Different kinds of subscriber objects are interested in the state changes or events of a publisher object, and want to react in their own unique way when the publisher generates an event. Moreover, the publisher wants to maintain low coupling to the subscribers. What to do?</p>

<p>Solution: Define a &ldquo;subscriber&rdquo; or &ldquo;listener&rdquo; interface. Subscribers implement this interface. The publisher can dynamically register subscribers who are interested in an event and notify them when an event occurs.</p>

<blockquote><p>Observer/Publish-Subscribe/Delegation Event Model (GoF)</p></blockquote>

<p>都是一个意思</p>

<p>Problem：Different kinds of subscriber objects are interested in the state changes or events of a publisher object, and want to react in their own unique way when the publisher generates an event. Moreover, the publisher wants to maintain low coupling to the subscribers. What to do?</p>

<p>Solution: Define a &ldquo;subscriber&rdquo; or &ldquo;listener&rdquo; interface. Subscribers implement this interface. The publisher can dynamically register subscribers who are interested in an event and notify them when an event occurs.</p>

<p>Observer provides a way to loosely couple objects in terms of communication. Publishers know about subscribers only through an interface, and subscribers can register (or de-register) dynamically with the publisher.</p>

<h3>Elaboration Iteration 3 &ndash; Intermediate Topics</h3>

<h3>Elaboration Iteration 3 &ndash; UML Activity Diagrams and Modeling</h3>

<p>A UML activity diagram shows sequential and parallel activities in a process. They are useful for modeling business processes, workflows, data flows, and complex algorithms.</p>

<p><img src="/images/post/activity-diagram.jpg" alt="" /></p>

<h3>Elaboration Iteration 3 &ndash; UML State Machine Diagrams and Modeling</h3>

<p>A UML state machine diagram, illustrates the interesting events and states of an object, and the behavior of an object in reaction to an event.</p>

<p>A state machine diagram shows the lifecycle of an object: what events it experiences, its transitions, and the states it is in between these events.</p>

<p><img src="/images/post/state-machine.jpg" alt="" /></p>

<h3>Elaboration Iteration 3 &ndash; Relating Use Cases</h3>

<h3>Elaboration Iteration 3 &ndash; More SSDs and Contracts</h3>

<h3>Elaboration Iteration 3 &ndash; Domain Model Refinement</h3>

<h3>Elaboration Iteration 3 &ndash; Architectural Analysis</h3>

<p>Architectural analysis can be viewed as a specialization of requirements analysis, with a focus on requirements that strongly influence the &ldquo;architecture.&rdquo; For example, identifying the need for a highly-secure system.</p>

<p>The essence of architectural analysis is to <strong>identify factors that should influence the architecture, understand their variability and priority, and resolve them.</strong> The difficult part is knowing what questions to ask, weighing the trade-offs, and knowing the many ways to resolve an architecturally significant factor, ranging from benign neglect, to fancy designs, to third-party products</p>

<ul>
<li>variation point

<ul>
<li>Variations in the existing current system or requirements, such as the multiple tax calculator interfaces that must be supported.</li>
</ul>
</li>
<li>evolution point

<ul>
<li>Speculative points of variation that may arise in the future, but which are not present in the existing requirements.</li>
</ul>
</li>
</ul>


<p>非功能性分析，比如安全、性能等</p>

<h3>Elaboration Iteration 3 &ndash; Logical Architecture Refinement</h3>

<p><img src="/images/post/view-of-layers.jpg" alt="" /></p>

<p>When the lower Application or Domain layer needs to communicate upward with the UI layer, it is usually via the Observer pattern.</p>

<p>it is not coupling per se that is a problem, but unnecessary coupling to variation and evolution points that are unstable and expensive to fix.</p>

<blockquote><p>Is the Application Layer Optional?</p></blockquote>

<p>If present, the Application layer contains objects responsible for knowing the session state of clients, mediating between the UI and Domain layers, and controlling the flow of work.</p>

<h3>Elaboration Iteration 3 &ndash; More Object Design with GoF Patterns</h3>

<blockquote><p>Handling Failure</p></blockquote>

<p>a common exception handling pattern:</p>

<ul>
<li>Convert Exceptions

<ul>
<li>Within a subsystem, avoid emitting lower level exceptions coming from lower subsystems or services. Rather, convert the lower level exception into one that is meaningful at the level of the subsystem. The higher level exception usually wraps the lower-level exception, and adds information, to make the exception more contextually meaningful to the higher level.</li>
</ul>
</li>
</ul>


<p>For example, the persistence subsystem catches a particular SQLException, and (assuming it can&rsquo;t handle it[2] ) throws a new DBUnavailableException, which contains the SQLException. Note that the DBProductAdapter is like a facade onto a logical subsystem for product information. Thus, the higher level DBProductAdapter (as the representative for a logical subsystem) catches the lower level DBUnavailableException and (assuming it can&rsquo;t handle it) throws a new ProductInfoUnavailableException, which wraps the DBUnavailableException.</p>

<ul>
<li><p>Name The Problem Not The Thrower</p>

<ul>
<li>What to call an exception? Assign a name that describes why the exception is being thrown, not the thrower. The benefit is that it makes it easier for the programmer to understand the problem, and it the highlights the essential similarity of many classes of exceptions (in a way that naming the thrower does not).</li>
</ul>
</li>
<li><p>Centralized Error Logging</p>

<ul>
<li>Use a Singleton-accessed central error logging object and report all exceptions to it. If it is a distributed system, each local singleton will collaborate with a central error logger.</li>
</ul>
</li>
<li><p>Error Dialog</p></li>
</ul>


<blockquote><p>Proxy</p></blockquote>

<p>Problem: Direct access to a real subject object is not desired or possible. What to do?</p>

<p>Solution: Add a level of indirection with a surrogate proxy object that implements the same interface as the subject object, and is responsibility for controlling or enhancing access to it.</p>

<blockquote><p>Abstract Factory</p></blockquote>

<p>Problem: How to create families of related classes that implement a common interface?</p>

<p>Solution: Define a factory interface (the abstract factory). Define a concrete factory class for each family of things to create. Optionally, define a true abstract class that implements the factory interface and provides common services to the concrete factories that extend it.</p>

<h3>Elaboration Iteration 3 &ndash; Package Design</h3>

<h3>Elaboration Iteration 3 &ndash; Designing a Persistence Framework with Patterns</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[极客时间「软件工程之美」学习笔记]]></title>
    <link href="http://cs50Mu.github.io/blog/2021/02/05/reading-notes-of-geektime-software-engineering/"/>
    <updated>2021-02-05T11:58:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2021/02/05/reading-notes-of-geektime-software-engineering</id>
    <content type="html"><![CDATA[<p><a href="https://time.geekbang.org/column/article/82337">软件工程之美</a></p>

<p>配套书籍：构建之法</p>

<p>[toc]</p>

<h3>开篇</h3>

<p>未来10年，什么不会变？</p>

<blockquote><p>数据结构、算法、面向对象思想、设计模式、软件工程</p></blockquote>

<h3>基础理论</h3>

<h4>怎样理解软件工程</h4>

<p>像这种有人参与、有计划、有步骤地造一件产品，我们通常称为“工程”。</p>

<p>就是要用工程化方法去规范软件开发，让项目可以按时完成、成本可控、质量有保证。</p>

<h4>工程思维</h4>

<p>软件工程不仅可以应用在软件项目中，还可以应用于日常生活中遇到的一些问题，Everything is a project</p>

<p>站在整体而非局部去看问题</p>

<p>工程思维，本质上是一种思考问题的方式，在解决日常遇到的问题时，尝试从一个项目的角度去看待问题、尝试用工程方法去解决问题、站在一个整体而不是局部的角度去看问题。</p>

<p><a href="https://zhuanlan.zhihu.com/p/21314651">记录下两个孩子在MineCraft里面还原公寓的经历</a></p>

<h4>瀑布模型</h4>

<p>问题的定义与规划</p>

<p>需求分析</p>

<p>软件设计</p>

<p>程序编码</p>

<p>软件测试</p>

<p>运行维护</p>

<p>优缺点：阶段分的很清楚，但有点死板了。对于前期需求不明确的项目，很难开展需求分析，后续如果有需求变更，瀑布模型便很难响应</p>

<h4>其它模型</h4>

<h5>快速原型模型</h5>

<p>先迅速建造一个可以运行的软件原型，然后收集用户反馈，再反复修改确认，使开发出的软件能真正反映用户需求，这种开发模型就叫快速原型模型，也叫原型模型</p>

<h5>增量模型</h5>

<p>按模块分批次交付</p>

<h5>迭代模型</h5>

<p>每次迭代都是一个可用的版本</p>

<h4>敏捷开发</h4>

<p>敏捷不是一种方法论，也不是一种软件开发的具体方法，更不是一个框架或过程，<strong>而是一套价值观和原则</strong>。</p>

<p>当你开发做决策的时候，遵守了敏捷开发的价值观和原则，不管你是不是用 Scrum 或者极限编程，那么都可以算是敏捷开发。</p>

<h4>项目管理金三角</h4>

<p>做产品想“多、快、好、省”都占着，是不可能的，最多只能选两样。</p>

<p>想要便宜和质量好，就要花时间等；想要快还要质量好，那就得多花钱；想要又便宜又快，那就得接受难用、质量差。</p>

<p>在软件项目中，有一个类似的平衡关系，就是软件质量（产品的质量，客户的满意度）与范围（需要实现多少功能）、时间（多久可以完成）、成本（花多少钱）四个要素之间的平衡。</p>

<h3>项目规划篇</h3>

<h4>可行性分析</h4>

<p>如何科学地论证项目的可行性，以及这个项目是不是值得做</p>

<p>可分为经济可行性、技术可行性、社会可行性</p>

<h4>如果你想技术转管理，先来试试管好一个项目</h4>

<h4>代码未动，计划先行</h4>

<p>如果没有计划，你的项目可能会陷入一种无序和混乱中。</p>

<p>参与做计划的过程，可以让你对项目的各种事情了然于胸，这就相当于扩大了你的上下文，让你有更高的视角看待当前工作遇到的问题。</p>

<blockquote><p>如何制定计划？</p></blockquote>

<p>第一步：任务分解；</p>

<p>意思是工作分解结构（Work Breakdown Structure, WBS)。就是把要做的事情，按照一个树形结构去组织，逐级分解，分割成小而具体的可交付结果，直到不能再拆分为止</p>

<p>第二步：估算时间；</p>

<p>主要还是得依靠以前的经验:</p>

<ul>
<li><p>任务拆分的越细致，想的越清楚，就能估算的越准确</p></li>
<li><p>要让负责这个任务的人员参与估算</p></li>
</ul>


<p>在沟通中也要注意技巧，<strong>不要采用质问的方式</strong>：“这么简单一个模块居然要 5 天？”这只会让听者产生逆反心理，无法有效的沟通。可以恰当的提一些问题来达到有效沟通的目的，比如我通常会问两个问题：</p>

<ul>
<li>“能不能把你这个任务再细化一下？”</li>
<li>“能不能简单介绍一下这个模块你是打算如何实现的？”</li>
</ul>


<p>对于估算的结果，<strong>通常还要考虑增加一些余量</strong>，因为实际项目执行过程中，并没办法保证是 100% 投入，有可能并行还有其他事情，或者一些突发事情、事先没有考虑到的任务都有可能影响进度。</p>

<p>第三步：排任务路径。</p>

<p>项目中有些任务是可以并行做的，而有些任务之间则是有依赖关系的。</p>

<p>排路径就是要根据任务之间的关系，资源的占用情况，排出合适的顺序。</p>

<p><strong>制定计划时不要担心不够准确，先有一个基本的计划，可以粒度比较粗，不那么准确，让事情先推进起来。</strong></p>

<blockquote><p>设置里程碑</p></blockquote>

<p>周期很长的项目，一直看不到结果，时间一长会很疲惫。所以有经验的项目经理会在项目启动后，根据制订好的初步计划，确定几个关键的里程碑</p>

<p>里程碑代表着一份承诺，在里程碑完成后，大家会获得一种正面激励。</p>

<p>在项目的推进过程中，根据里程碑完成的情况，你就可以很直观地知道项目的进展如何。如果发现不能如期完成里程碑，就需要进行适当的调整了</p>

<blockquote><p>计划需要跟踪和调整</p></blockquote>

<p>跟踪进度的方式主要有两种，一种是项目经理定期收集跟踪，一种是项目成员主动汇报。项目经理挨个收集的话，会有一个沟通确认的过程，对进度会了解的更准确；项目成员主动汇报，可以减少项目经理的收集工作，但有可能不准确。</p>

<h4>流程和规范：红绿灯不是约束，而是用来提高效率</h4>

<p>从个体来看，因为流程规范的存在，确实可能存在效率降低的情况，但从团队的角度来看，好的流程规范反而是提升效率的。</p>

<p>以代码审查的规范为例，对于技术高的程序员来说，代码审查可能会耽误一点时间，但对整个团队来讲：</p>

<ul>
<li>即使是水平高的程序员，也可能会被发现有错误，代码审查可以降低出错的概率，保障质量</li>
<li>对于水平低的程序员，可以通过代码审查学习和成长，代码被高水平程序员审查后，可以有效提高质量。</li>
</ul>


<blockquote><p>如何制定好流程规范？</p></blockquote>

<p>第一步：明确要解决的问题</p>

<p>要制定一个流程规范，第一步就是明确你是要解决什么样的问题。项目中很多问题，都可以思考是不是能通过流程解决。</p>

<p>第二步：提出解决方案</p>

<p>第三步：达成共识，推广执行</p>

<p>在流程规范提出后，还需要得到大家认可，只有大家认可，达成共识，才能共同遵守，保障制度的执行。</p>

<p>第四步： 持续优化，不断改进</p>

<p>流程制定后，在实际执行的时候，难免发现一些不合理或者不科学的地方，这时候就需要对其进行调整。</p>

<blockquote><p>将流程规范工具化</p></blockquote>

<p>尽可能借助技术手段来推动甚至替代流程规范。</p>

<h4>白天开会，加班写代码的节奏怎么破？</h4>

<blockquote><p>如何提高开会效率？</p></blockquote>

<p>我们先要认识到一个前提：<strong>那就是要让大家意识到开会是有成本的，如果开会创造的价值不能大于其成本，就是浪费。</strong></p>

<ol>
<li>砍掉一些没价值的会议</li>
<li>减少参与会议的人。会议的成本和两个因素相关：一个是人数，一个是时间。如果减少人数，就能减少成本。</li>
<li>缩短开会时间</li>
<li>提升会议所创造的价值</li>
</ol>


<h4>项目管理工具：一切管理问题，都应思考能否通过工具解决</h4>

<blockquote><p>基于 Ticket 的任务跟踪系统</p></blockquote>

<p>那一个 Ticket 应该包含哪些主要信息呢？</p>

<ul>
<li>标题：摘要性的描述 Ticket 内容；</li>
<li>类型：属于什么类型的 Ticket：Bug、需求、任务；</li>
<li>内容：Ticket 的详细内容，例如，如果是 Bug 的话，除了要写清楚 Bug 内容，还需要重现步骤。如果是需求的话，要有需求的描述，可能还需要额外的文档链接辅助说明；</li>
<li>创建人：谁创建的这条 Ticket；</li>
<li>优先级：这个 Ticket 的优先级高还是低；</li>
<li>状态：Ticket 的状态，例如：未开始、处理中、已解决、重新打开、关闭等；</li>
<li>指派给谁：这个 Ticket 被指派给谁了，谁来负责；</li>
<li>历史记录：整个 Ticket 改变的历史信息，用以跟踪；</li>
</ul>


<h4>风险管理：不能盲目乐观，凡事都应该有B计划</h4>

<p>风险管理就是指在项目进行过程中，识别可能的风险，对风险进行评估，并加以监控，从而减少风险对项目的负面影响。</p>

<blockquote><p>如何做好风险管理？</p></blockquote>

<p>培养风险意识</p>

<p>项目中的任务，不能盲目乐观，都思考一下它最坏的结果是什么，如果最坏的结果不能接受，就说明要有个 B 计划，考虑风险管理了。</p>

<p>管理风险</p>

<p>第一步：风险识别，识别可能的风险</p>

<ul>
<li>项目风险：项目预算、进度、用户和需求等方面的问题；</li>
<li>人员风险：人员离职、人手不足等问题；</li>
<li>技术风险：采用的技术所可能带来的风险；</li>
<li>商业风险：与市场、产品策略等有关的商业风险。</li>
</ul>


<p>第二步：风险量化，对风险进行评估量化</p>

<p>第三步：应对计划，对风险制定应对策略</p>

<p>第四步：风险监控，对风险进行监控预警</p>

<h4>怎样才能写好项目文档？</h4>

<blockquote><p>为什么要写文档？</p></blockquote>

<p>写文档，其实对个人、对项目、对团队，都是非常重要的事情。</p>

<ul>
<li>帮助写文档的人理清楚思路.先写文档。先写文档，就会抛开代码细节，去站在全局思考</li>
</ul>


<p>有人觉得自己写作不行，所以不会写文档。写作不行，只是让你在用词遣句上会有所欠缺，而这不是写文档的真正障碍</p>

<p><strong>真正的障碍是没想清楚，在心中只有一些未成型的混乱的想法和概念，必须要努力把这些模糊的想法确定化和具体化，才能写出来。</strong></p>

<p>换个角度来说，如果你连文档都写不出来，那又怎么能指望代码写得好呢？</p>

<ul>
<li>便于未来的维护和交接</li>
</ul>


<p>我有一个习惯，每到一个新项目组，就会把日常工作中遇到的问题、各种环境配置、一些操作的步骤等，所有以后可能还会用上的都记录下来，其中一些还会整理到团队的 WIKI 上</p>

<ul>
<li>团队更好的协作沟通</li>
</ul>


<blockquote><p>如何写好文档？</p></blockquote>

<p>很多人对于写文档是有心理压力，觉得自己写作水平不高，不知道该如何下手。首先你要对文档有一个正确的认识：文档写作，<strong>关键是通过文档把你的想法表达出来</strong>，至于用词、格式相对都是其次的。</p>

<ul>
<li>从模仿开始</li>
<li>从小文档开始</li>
</ul>


<p>项目中很多文档都可以从这样小的内容开始：别人给你讲一个问题的时候记录下来；你给别人讲一个问题的时候记录下来；解决一个技术难题时记录下来方案……</p>

<p>这些记录下来的笔记，稍加整理，就可以是很不错的项目文档。</p>

<ul>
<li>从粗到细，迭代更新</li>
</ul>


<p>为什么我不一开始就写很细的文档呢？</p>

<p>一个原因是太难写，要花很多时间精力，甚至可能写不下去；另一个原因就是在收集反馈的过程中，会有很多修改。<strong>写得越细则无用功越多，最后，你甚至会因为不想改文档而抵触不同的意见。</strong></p>

<blockquote><p>基本的画图的技巧</p></blockquote>

<p>写文档的时候，主要有几种图比较常用：线框图、流程图、时序图、各种格式的截图。</p>

<ul>
<li>线框图</li>
<li>流程图</li>
<li>时序图</li>
</ul>


<p>在评审技术文档或者你自己写技术文档，你可以从几个角度去思考：</p>

<ol>
<li><p>文档是否讲清楚了它的目的是什么？内容是否和目的匹配？
比如说你这个设计文档是要解决什么问题？设计的是哪个模块？</p></li>
<li><p>文档是否解释了为什么要这么做？
比如说你这个模块设计文档，是否解释清楚了为什么要这样设计？这样设计的优缺点是什么？</p></li>
<li><p>文档是否描述清楚了如何实现？
比如说作为模块设计文档，到底是如何设计的？有没有讲清楚整体的设计架构？</p></li>
</ol>


<p>总结一下就是一个技术文档，要讲清楚：是什么（What）？为什么（Why）？怎么做（How）？这三个是最核心的要素。</p>

<p>这三个核心问题讲清楚了，然后就是多画图，内容简洁明了。</p>

<blockquote><p>例子？</p></blockquote>

<p><a href="https://docshome.gitbooks.io/microservices/content/2-using-an-api-gateway.html">微服务：从设计到部署</a></p>

<h3>需求分析篇</h3>

<h3>系统设计篇</h3>

<h4>架构设计：普通程序员也能实现复杂系统？</h4>

<p>软件需求越来越多，而高手又是稀缺资源，所以要解决的一个问题就是：让普通程序员也能参与其中，一起实现复杂系统，而不必依赖于很多精英。</p>

<blockquote><p>为什么软件项目需要架构设计？</p></blockquote>

<p>复杂的软件项目，通常有两个特点：需求不确定和技术复杂。</p>

<blockquote><p>什么是架构设计？</p></blockquote>

<p>最开始我以为架构设计的目标是满足业务需求，保证软件能正常工作。后来发现<strong>这其实只是最基本的要求，因为很多糟糕的架构设计，也能满足业务需求，让系统正常运行。</strong></p>

<p>架构设计的目标，是<strong>用最小的人力成本来满足需求的开发和响应需求的变化，用最小的运行成本来保障软件的运行。</strong></p>

<p>架构设计，已经有很多成熟的方法:</p>

<ul>
<li>使用微服务这样的架构，把复杂系统拆分成一系列小的服务，服务再拆成功能模块，让人员更好地分工协作；</li>
<li>通过前后端分离，让程序员更专注于某个知识领域，降低开发难度；</li>
<li>用分层设计来隔离业务逻辑，减少需求变更带来的影响。</li>
</ul>


<p>这些架构设计的方法，其实都是基于工程领域分而治之的策略，本质上就是将系统分拆，将人员分拆。<strong>但是光拆还不够，拆完了还得能拼回来</strong></p>

<blockquote><p>如何做好架构设计？</p></blockquote>

<p>第一步：分析需求</p>

<p>架构设计，最基本的就是要能满足业务需求，所以搞清楚需求是至关重要一步。<strong>而产品需求，只有功能的描述，界面的交互，还需要进一步进行抽象。</strong></p>

<p>一个常用的分析方法就是分析用例，也就是了解主要用户角色和其使用的场景。</p>

<p>第二步：选择相似的成熟的架构设计方案</p>

<p><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html">软件架构入门</a></p>

<p><a href="https://yq.aliyun.com/articles/57715">异地多活设计辣么难？其实是你想多了！</a></p>

<p>这篇文章有醍醐灌顶的感觉~  解开了不少疑惑！</p>

<p>第三步：自顶向下层层细化</p>

<p>第四步：验证和优化架构设计方案</p>

<blockquote><p>推荐材料</p></blockquote>

<ul>
<li><a href="https://www.w3cschool.cn/architectroad/">架构师之路</a></li>
<li><a href="https://mp.weixin.qq.com/s/wSCeO8QVYniMIGcBFDZyjw?">图解：从单个服务器扩展到百万用户的系统</a></li>
<li><a href="https://www.infoq.cn/article/architecture-design-process">以“前浪微博”场景为例，谈谈架构设计流程四步曲</a></li>
<li><a href="https://book.douban.com/subject/30333919/">架构整洁之道</a></li>
<li><a href="https://www.infoq.cn/article/q7xlHaaiZ-9H6SwHXCNg">极客邦池建强：难的不是从零打造一款产品，而是……</a></li>
<li><a href="https://book.douban.com/subject/1761742/">Head First Object-Oriented Analysis and Design</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html">软件架构入门</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「影响力」读书笔记]]></title>
    <link href="http://cs50Mu.github.io/blog/2021/02/05/reading-notes-of-influence/"/>
    <updated>2021-02-05T11:54:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2021/02/05/reading-notes-of-influence</id>
    <content type="html"><![CDATA[<h3>互惠</h3>

<p>一个古老的原理：给予、索取。。。再索取</p>

<p>互惠原因认为，我们应该尽量以相同的方式回报他人为我们所做的一切</p>

<p>当前社会的普遍价值观认为「互惠」是一种好的行为，若违背了它会遭到无情的唾弃和嘲弄，甚至会被戴上乞讨赖账、忘恩负义之类的大帽子。我们为了维护自己的形象，往往会努力遵循这个原则，但也给了一些人利用这个原理获利的机会</p>

<p>互惠原理的几个重要特点：</p>

<ul>
<li>互惠原理具有压倒性的力量</li>
</ul>


<p>意味着即使是我们不喜欢的人（不请自来的推销员、令人讨厌的点头之交等），只要在提出要求之前送我们一个小小的人情，我们对他们的要求就失去了抵抗力。</p>

<p>例子：</p>

<p>问卷调查时附带一些钱作为礼物，会明显提供问卷的答复率（对比，回答了问卷后，再给奖励，效果并不好）</p>

<p>生意人发现，在收到一件礼物后，顾客们有可能会购买他们本来会拒绝的服务或商品</p>

<p>免费试用（据说目的是让他们试一下看自己到底喜不喜欢这个产品），但实际上免费试用品也是一种礼品。比如，超市中的试吃，你吃了后还会那么从容的走开吗？</p>

<p>吉姆 琼斯：集体自杀事件中，大部分人都顺从的服毒自杀，但没有自杀的人中，拒绝自杀的命令是因为“当初在有需要的时候拒绝了吉姆 琼斯的帮助”</p>

<ul>
<li>强加于人的负债感</li>
</ul>


<p>互惠原理只是说我们应该回报人家的善举，而并没有说只有当我们主动要求了这个善举时才有回报的义务。当这个好处是不请自来时，这种负债的感觉也是照样存在的</p>

<h4>「互惠」的变种</h4>

<ul>
<li>相互退让</li>
</ul>


<p>如果他人对我们作出让步，我们也有义务作出让步</p>

<ul>
<li>拒绝 &ndash; 退让策略</li>
</ul>


<p>先提出一个比较大的、极可能被拒绝的请求，然后在被拒绝后，再提出你真正想提的请求</p>

<p>例子：</p>

<p>如果你要向别人推销，就要先展示质次价高的商品；如果你要向别人借钱，就要先开口借一个很高的金额。这样会增加第二个请求被接受的可能性</p>

<h4>如何保护自己</h4>

<p>好像也没有很好的办法</p>

<ul>
<li>拒绝好意？ 有可能会误伤</li>
<li>有意识的提醒自己</li>
</ul>


<h3>承诺和一致</h3>

<p>如果一开始没拒绝，后来就难了</p>

<p>我们都有一种要做到与过去的行为相一致的愿望。一旦我们作出了一个觉得或者选择了一种立场，就会有发自内心以及来自外部的压力来迫使我们与此保持一致。在这种压力下，我们总是希望以实际行动来证明我们以前的决定是正确的</p>

<p>例子：</p>

<p>一投完票，选民们往往就会更相信他们的候选人一定会当选</p>

<p>玩具商先鼓吹一个玩具，当又不供货，家长买不到只能先买别的替代品，然后玩具商又鼓吹一波，这次有货了，为了信守承诺，家长又买了一次</p>

<h4>为什么会这样？</h4>

<p>很多情况下，保持一致是一种很有益的行为；始终如一的个性是受到高度评价的</p>

<h4>如何被利用</h4>

<p>先引诱我们采取某种行动或作出某种声明，然后再利用我们要与过去保持一致的压力来迫使我们屈从于他们的要求</p>

<p>例子：</p>

<p>音乐会广告隐藏票价（即使是一个电话，也是对参加音乐会的一种初步承诺）</p>

<p>先给出一个很有诱惑力的价格，使顾客作出买车的决定，然后当这个决定已经作出但还没有最后成交时，那个最先给出的诱惑却被巧妙的拿走了</p>

<h4>如何保护自己</h4>

<p>唯一有效的办法是对原理有一个清醒的认识。虽然保持一致性通常来说是应该的，甚至是至关重要的，但愚蠢地、机械地保持一致却是应该避免的</p>

<h3>社会认同</h3>

<p>在大家都用同样的方式思考的地方，没有人思考的很深刻</p>

<p>为什么有些电视中会使用配音笑声？为什么笑声明明是假的，却仍然可以左右我们的行动？</p>

<p>社会认同原理认为，我们进行是非判断的标准之一就是看别人是怎么想的，尤其是当我们要决定什么是正确的行为时。如果我们看到别人在某种场合做某件事情，我们就会断定这样做是有道理的。我们周围的人的做法对我们决定自己应该怎么行动都有重要的指导意义。</p>

<p>例子：</p>

<p>小费盘中先放几块钱，假装是前面的顾客留下的</p>

<p>广告商最喜欢告诉我们某种商品的增长最快或者销售最旺，不必说他们的产品很优良，而只需说其他人都这样认为，这个证据已经很充分了</p>

<p>慈善节目里主持人会花大量时间念一长串已经捐赠的观众名单</p>

<p>夜总会老板在舞厅还有空余的情况下故意让顾客在外面排长龙（让大家觉得，这么多人都去了。。）</p>

<blockquote><p>旁观者效应</p></blockquote>

<ul>
<li>别人不救，我也不救</li>
</ul>


<p><a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E6%82%A6%E6%82%A6%E4%BA%8B%E4%BB%B6">小悦悦事件</a>：2岁女童王悦（乳名“小悦悦”）在阴雨天黑夜独自跑出家门百米外后，先后被两辆汽车撞伤倒地，最初路过的18名行人未及时施救，惟第19名路人陈贤妹（生于1953年，佛山本地人，职业是清洁工）救起王悦</p>

<p>如何破解？  明确指定一个人来寻求帮助</p>

<ul>
<li>别人进，我也进</li>
</ul>


<p>股票牛市大家都冲进去</p>

<h4>影响因子</h4>

<ul>
<li>不确定性</li>
</ul>


<p>当人们对自己的处境不是很有把握时，更有可能根据他人的行为来决定自己应该怎么办</p>

<ul>
<li>相似性</li>
</ul>


<p>我们更有可能效仿与我们相同而不是不同的人的行动</p>

<h4>如何保护自己</h4>

<p>大部分情况下，这个原理是非常有用处的</p>

<p>困境：如何利用一种既对我们有利又对我们有害的装置</p>

<ul>
<li>识别被伪造的社会证据。比如前面说的假笑、广告里的普通人</li>
<li>多观察、多思考、多求证</li>
</ul>


<h3>喜好</h3>

<p>人们总是愿意答应自己认识和喜爱的人提出的要求，这应该是很自然的。但这条原理却被一些想要我们答应他们要求的陌生人利用了</p>

<ul>
<li>外表吸引力的光环</li>
</ul>


<p>例子：</p>

<p>骗子通常都是俊男靓女</p>

<ul>
<li>相似性</li>
</ul>


<p>人都喜欢跟自己类似的人，不管是什么方面，所谓的聊的来</p>

<ul>
<li>称赞</li>
</ul>


<h4>如何保护自己</h4>

<p>时刻自问：是否对「对方」过于喜爱了？</p>

<p>提醒自己，把交易者和交易分开</p>

<h3>权威</h3>

<p>跟着行家走</p>

<p>遵从权威对我们来说，通常都是一件很实际的事情。比如，年幼的时候，老师和父母是我们心目中的权威人物，我们发现听他们的话是很明智的。这一方面是因为他们拥有更多的智慧，另一方面是由于他们就是决定奖赏的人</p>

<p>成年后，因为同样的原因，我们还是愿意接受权威的忠告，只不过现在的权威人物变成了雇主、法官和政府。因为他们所处的有利位置，他们可以接触更多的信息，拥有更多的权力，因此按照他们的意志行事大体上是错不了的。</p>

<p>而正是由于我们对这一点深信不疑，也很容易走进一个误区：有时候权威的话并没有什么道理，可是我们还是会毫不犹豫的按照他们所说的做</p>

<p>例子：</p>

<p>名人做广告。扮演皇帝的演员</p>

<ul>
<li>头衔</li>
</ul>


<p>骗子喜欢用头衔、衣着和象征身份地位的外部标志</p>

<ul>
<li>衣着</li>
</ul>


<p>假警察</p>

<p>网络诈骗，一般会声称自己是公安局的</p>

<ul>
<li>外部标志</li>
</ul>


<p>有豪车</p>

<h4>如何保护自己</h4>

<p>做好充分的思想准备，对权威保持高度的警觉。有了这种警觉，同时也意识到权威是多么容易假冒，在遇到有人想利用权威来影响我们的场合，我们自然就会采取一种比较谨慎的态度</p>

<h3>短缺</h3>

<p>物以稀为贵</p>

<ul>
<li>数量有限</li>
</ul>


<p>例子：</p>

<p>告诉顾客某种产品数量有限，不能保证一直有货。&mdash;&mdash;  饥饿营销</p>

<ul>
<li>时间限制</li>
</ul>


<p>截止时间策略</p>

<p>例子：</p>

<p>审查制度使得“禁片”更加流行，删减片段更容易传播</p>

<h4>如何保护自己</h4>

<p>面临短缺的压力时，问自己：我们为什么想要这件东西？如果我们的回答是主要目的是拥有它，那么我们就应该根据它的稀缺程度来决定它的价格。然而，如果回答是我们之所以想要它，主要是为了它的功能（驾驶、吃、穿、喝的东西），那么我们就应该记住，不管这种东西的供应是否充足，它的功能是一样的。</p>
]]></content>
  </entry>
  
</feed>
