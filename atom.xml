<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Hard Way Is Easier]]></title>
  <link href="http://cs50Mu.github.io/atom.xml" rel="self"/>
  <link href="http://cs50Mu.github.io/"/>
  <updated>2016-09-28T12:00:43+08:00</updated>
  <id>http://cs50Mu.github.io/</id>
  <author>
    <name><![CDATA[linuxfish]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[first glance at django admin]]></title>
    <link href="http://cs50Mu.github.io/blog/2016/09/13/first-glance-at-django-admin/"/>
    <updated>2016-09-13T17:27:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2016/09/13/first-glance-at-django-admin</id>
    <content type="html"><![CDATA[<p>主要是一些定制的问题，其实django admin已经集成的非常好了，该有的都有了，一般开箱即用就行了。</p>

<p>如果你对Django Admin不熟悉的话，<a href="http://dokelung-blog.logdown.com/posts/220832-django-notes-6-manage-your-system-admin">这里</a>有一篇很好的介绍。</p>

<h3>dependent select fields</h3>

<p>其实就是子field的可选项是依赖它的父field的，这个需求在admin中没有找到配置方法，找到一个插件<a href="https://github.com/digi604/django-smart-selects"><code>django-smart-selects</code></a></p>

<h3>model field options</h3>

<ul>
<li><p>blank=True，实际控制的form的validation，允许表单中该字段为空</p></li>
<li><p>null=True，控制的DB中字段的属性，null或者not null</p></li>
</ul>


<h3>控制某条记录的显示</h3>

<p>需要在model的定义中加入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__unicode__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>否则，记录显示出来的是Python object</p>

<h3>在view中显示的model名称的自定义</h3>

<p>这个名称默认就是显示的是在代码中定义的model的名称，可以用以下代码来自定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>  <span class="n">verbose_name</span> <span class="o">=</span> <span class="s">u&#39;商品子类&#39;</span>
</span><span class='line'>  <span class="n">verbose_name_plural</span> <span class="o">=</span> <span class="s">u&#39;商品子类&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>自定义app名称</h3>

<p>参考<a href="http://stackoverflow.com/questions/612372/can-you-give-a-django-app-a-verbose-name-for-use-throughout-the-admin">这里</a></p>

<h3>多个字段作为一个唯一键</h3>

<p>需要在该表对应的model类的Meta类中增加<code>unique_together</code>定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>  <span class="n">unique_together</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;parent_category&#39;</span><span class="p">,</span> <span class="s">&#39;sub_category&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">verbose_name</span> <span class="o">=</span> <span class="s">u&#39;商品&#39;</span>
</span><span class='line'>  <span class="n">verbose_name_plural</span> <span class="o">=</span> <span class="s">u&#39;商品&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>对显示界面的定制</h3>

<p>比如，控制要显示的字段、哪几个字段是可以点击的、显示搜索框、分页等，这些都是可以配置的，不用自己来实现，非常方便。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ProductAdmin</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
</span><span class='line'>    <span class="n">list_display</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;sku&#39;</span><span class="p">,</span> <span class="s">&#39;barcode&#39;</span><span class="p">,</span> <span class="s">&#39;price&#39;</span><span class="p">,</span> <span class="s">&#39;description&#39;</span><span class="p">,</span> <span class="s">&#39;create_time&#39;</span><span class="p">,</span> <span class="s">&#39;update_time&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list_display_links</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">exclude</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;sku&#39;</span><span class="p">,)</span>
</span><span class='line'>    <span class="n">search_fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,)</span>
</span><span class='line'>    <span class="n">list_per_page</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">ordering</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">empty_value_display</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：</p>

<ul>
<li><a href="https://brobin.me/blog/2015/03/customizing-the-django-admin/">https://brobin.me/blog/2015/03/customizing-the-django-admin/</a></li>
<li><a href="https://www.webforefront.com/django/setupdjangomodelsindjangoadmin.html#prettyPhoto">https://www.webforefront.com/django/setupdjangomodelsindjangoadmin.html#prettyPhoto</a>  这篇讲的非常详尽，但其实都在官方文档里了，但有时候懒得一个一个去找了。</li>
</ul>


<h3>自定义方法（ModelAdmin methods）</h3>

<p>Django的admin提供了一系列的方法，支持你通过重写这些方法来定制它的默认行为，比如<code>save_model</code>方法可以让你自定义入库的操作，加入一些自己的逻辑。它提供了非常多的方法，具体可以看文档，我目前只用到了一个<code>save_model</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ProductAdmin</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
</span><span class='line'>    <span class="n">list_display</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;sku&#39;</span><span class="p">,</span> <span class="s">&#39;barcode&#39;</span><span class="p">,</span> <span class="s">&#39;price&#39;</span><span class="p">,</span> <span class="s">&#39;description&#39;</span><span class="p">,</span> <span class="s">&#39;create_time&#39;</span><span class="p">,</span> <span class="s">&#39;update_time&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list_display_links</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">exclude</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;sku&#39;</span><span class="p">,)</span>
</span><span class='line'>    <span class="n">search_fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,)</span>
</span><span class='line'>    <span class="n">list_per_page</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">ordering</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">empty_value_display</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save_model</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">form</span><span class="p">,</span> <span class="n">change</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">change</span><span class="p">:</span>         <span class="c"># Add</span>
</span><span class='line'>            <span class="n">obj</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>         <span class="c">#  save in order to get the auto increment id</span>
</span><span class='line'>            <span class="n">generate_sku</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>            <span class="n">obj</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>         <span class="c">#  save generated sku</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>                  <span class="c"># Update</span>
</span><span class='line'><span class="c">#            generate_sku(obj) # sku should not be changed once the record is inserted, even if all the other fields have changed</span>
</span><span class='line'>            <span class="n">obj</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_sku</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>    <span class="n">parent_category</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">parent_category</span><span class="o">.</span><span class="n">code</span>
</span><span class='line'>    <span class="n">sub_category</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">sub_category</span><span class="o">.</span><span class="n">code</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sku_parts</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;XLJ&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">sku_parts</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="n">parent_category</span><span class="p">,</span> <span class="n">sub_category</span><span class="p">,</span> <span class="s">&#39;X&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">today</span> <span class="o">=</span> <span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'>    <span class="n">sku_parts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">today</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%y%m</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">seq_id</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%06d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">id</span>
</span><span class='line'>    <span class="n">sku_parts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq_id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sku</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r&#39;[^a-zA-Z0-9]&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sku_parts</span><span class="p">))</span>
</span><span class='line'>    <span class="n">obj</span><span class="o">.</span><span class="n">sku</span> <span class="o">=</span> <span class="n">sku</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：</p>

<ul>
<li><a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#modeladmin-methods">https://docs.djangoproject.com/en/dev/ref/contrib/admin/#modeladmin-methods</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[csapp concurrent programming]]></title>
    <link href="http://cs50Mu.github.io/blog/2016/08/29/csapp-concurrent-programming/"/>
    <updated>2016-08-29T14:12:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2016/08/29/csapp-concurrent-programming</id>
    <content type="html"><![CDATA[<p>Applications that use application-level concurrency are known as concurrent programs. Modern operating systems provide three basic approaches for building concurrent programs:</p>

<ul>
<li><p>Processes. With this approach, each logical control flow is a process that is scheduled and maintained by the kernel. Since processes have separate virtual address spaces, flows that want to communicate with each other must use some kind of explicit interprocess communication (IPC) mechanism.</p></li>
<li><p>I/O multiplexing.This is a form of concurrent programming where <strong>applications explicitly schedule their own logical flows in the context of a single process</strong>. Logical flows are modeled as state machines that the main program explicitly transitions from state to state as a result of data arriving on file descriptors. Since the program is a single process, all flows share the same address space.</p></li>
<li><p>Threads. Threads are logical flows that run in the context of a single process and are scheduled by the kernel. You can think of threads as a hybrid of the other two approaches, scheduled by the kernel like process flows, and sharing the same virtual address space like I/O multiplexing flows.</p></li>
</ul>


<h3>IO之殇</h3>

<p>Access to the filesystem or the network are really long operations from the perspective of the CPU. See the numbers from Jeffrey Dean’s talk Stanford CS295 class lecture, Spring, 2007.</p>

<pre><code>Operation     Latency
L1 cache reference     0.5 ns
Branch mispredict     5 ns
L2 cache reference     7 ns
Mutex lock/unlock     25 ns
Main memory reference     100 ns
Compress 1K bytes with Zippy     3,000 ns
Send 2K bytes over 1 Gbps network     20,000 ns
Read 1 MB sequentially from memory     250,000 ns
Round trip within same datacenter     500,000 ns
Disk seek     10,000,000 ns
Read 1 MB sequentially from disk     20,000,000 ns
Send packet CA-&gt;Netherlands-&gt;CA     150,000,000 ns
</code></pre>

<p>Blocking I/Os (or synchronous I/Os) will tie up the system resources as the waiting processes/threads cannot be used for something else. And from the CPU perspective, any I/O which is not done from/to memory takes ages. Fortunately the system itself is not stuck while I/Os are happening. The OS is going to preempt (i.e. interrupt) the process waiting for an I/O, allowing the CPU to be used by another process. But <strong>this costs another context switch and meanwhile I/O intensive applications will spend most of their time… waiting!</strong></p>

<p>对于multi-process/threading来说</p>

<p>So, the more processes there are, the more they will compete for the CPU. <strong>The more I/Os the application is doing, the more context switches there are, amplified by the number of process/threads the application is made of.</strong> At some point, no matter how good the operating system is, it is going to become overwhelmed. It will spend most of its time switching contexts and have many processes/threads waiting either for I/O or to acquire the CPU. This basically means that <strong>in such a model, the scalability is not at all linear to the number of processes/threads up to the CPU limit. The capacity gain of adding a process/thread significantly decreases with the number of active processes/threads.</strong></p>

<h3>Concurrent Programming with Processes</h3>

<p>Pros and Cons of Processes</p>

<p>Processes have a clean model for sharing state information between parents and children: file tables are shared and user address spaces are not. Having separate address spaces for processes is both an advantage and a disadvantage. It is im- possible for one process to accidentally overwrite the virtual memory of another process, which eliminates a lot of confusing failures—an obvious advantage.</p>

<p>On the other hand, separate address spaces make it more difficult for pro- cesses to share state information. To share information, they must use explicit IPC (interprocess communications) mechanisms. (See Aside.) Another disadvan- tage of process-based designs is that they tend to be slower because the overhead for process control and IPC is high.</p>

<h3>Concurrent Programming with I/O Multiplexing</h3>

<p>The select function manipulates sets of type <code>fd_set</code>, which are known as descriptor sets. Logically, we think of a descriptor set as a bit vector of size n: bn−1,&hellip;,b1,b0</p>

<p>Each bit bk corresponds to descriptor k. Descriptor k is a member of the descriptor set if and only if bk = 1.</p>

<p>the select function takes two inputs: a descriptor set (fdset) called the read set, and the cardinality (n) of the read set (actually the maximum cardinality of any descriptor set). <strong>The select function blocks until at least one descriptor in the read set is ready for reading. A descriptor k is ready for reading if and only if a request to read 1 byte from that descriptor would not block.</strong>select函数也是会阻塞的。</p>

<p>Question: IO多路复用是如何实现并发的效果的？</p>

<p>本质上是Event Driven Model来实现并发的，I/O Multiplexing只是必不可少的一环，有了它，使用Event Driven Model才成为可能。</p>

<p>我是这样理解的：在一个事件循环（event loop）中，不断的调用select来返回当前可读、可写的descriptor，然后做相应的处理，一直循环往复。在这个过程中的一个关键是，只有select操作是阻塞的，一旦它有返回，后面的操作就一定不是阻塞的，所以就不会有无谓的时间浪费在等待读和等待写上面。如果CPU的执行速度够快，那么从一个使用者的角度来看的话，就会看到并发的效果（而实质上这些“并发”的连接是按顺序被处理的）。这个道理现在看来，跟单核CPU上的多进程、多线程是一个道理（CPU-time multiplexing）。感觉实现并发效果的关键是：select的这个过程要足够快，然后对select返回的descriptor的处理也要快，否则就不会有并发的效果了。</p>

<h4>Pros and Cons of I/O Multiplexing</h4>

<ul>
<li><p>One advantage is that event-driven designs give programmers more control over the behavior of their programs than process-based designs. For example, we can imagine writing an event-driven concurrent server that gives preferred service to some clients, which would be difficult for a concurrent server based on processes. 程序员对自己的程序有更多的控制，比如优先提供某个服务，而不是像基于进程的并发那样，完全交给操作系统来决定。</p></li>
<li><p>Another advantage is that an event-driven server based on I/O multiplexing runs in the context of a single process, and thus every logical flow has access to the entire address space of the process.This makes it easy to share data between flows. A related advantage of running as a single process is that you can debug your concurrent server as you would any sequential program, using a familiar debugging tool such as gdb. Finally, event-driven designs are often significantly more efficient than process-based designs because they do not require a process context switch to schedule a new flow. 由于是单进程，所以共享更方便；debug难度也比多进程要低；资源消耗也比多进程低（因为没有context switch）</p></li>
<li><p>A significant disadvantage of event-driven designs is coding complexity. 缺点就是代码的复杂度上来了。</p></li>
<li><p>Another significant disadvantage of event-based designs is that they cannot fully utilize multi-core processors. 还有一个缺点是不能利用多核</p></li>
</ul>


<h4>Event Driven Programming又是什么呢？</h4>

<p>常常看到event driven和I/O Multiplexing这两个概念在一起。我是这样理解的，通过I/O Multiplexing可以提供event driven programming中的事件。</p>

<p>In an event model, everything runs in one process, one thread. Instead of spawning a new process/thread for each connection request, a event is emitted and the appropriate callback for that event is invoked. Once an event is treated, the process is ready to treat another event.</p>

<p>Such a model is particularly interesting if most of the activities can be turned into events. This becomes a really good concurrency and high-performance model when any I/Os (not just network I/O as is the most common in existing frameworks) are events. It is based on event patterns such as the Reactor or the Proactor which are patterns for Concurrent, Parallel, and Distributed Systems; documents from Douglas C. Schmidt. This event-driven concurrency model is superior to the traditional multithreaded/multi-process one: the memory footprint is drastically reduced, the CPU is better used and more clients can be served concurrently out of a single machine.</p>

<h4>The Event Loop</h4>

<p>To some extent, one can consider the event-driven approach being very similar to cooperative multitasking but at the application level. Event-driven applications are themselves multiplexing CPU time between clients.</p>

<p>There is obviously a risk with this; the same that with cooperative multitasking in fact. A risk which explains why at the OS level, preemptive multitasking is used. <strong>If the process at some point can block for one client, then it will block all the other clients.</strong> For example, in cooperative multitasking a non-responding process would make the system hang (Remember Windows before Windows 95 or Mac OS before Mac OS X ? )</p>

<p>In event-driven model, all the events are treated by a gigantic loop know as the event-loop. The event-loop is going to get from a queue the next event to process and will dispatch it the corresponding handler. Anyone blocking the event-loop will prevent the other events from being processed. So in Node (and in all event-driven framework) the golden rule is <strong>“DO NOT BLOCK THE EVENT LOOP”.</strong> Everything has to be non-blocking. And Node is particularly good at this because all the API it exposes is non-blocking (with the exception of some file system operations which come in two flavors: asynchronous and synchronous).</p>

<h4>参考</h4>

<ul>
<li><a href="http://www.baloo.io/blog/2013/11/30/node-event-driven-programming/">Node-Event-driven programming</a></li>
</ul>


<h3>Concurrent Programming with Threads</h3>

<p>A thread is a logical flow that runs in the context of a process. modern systems also allow us to write programs that have multiple threads running concurrently in a single process. The threads are scheduled automatically by the kernel. <strong>Each thread has its own thread context, including a unique integer thread ID (TID), stack, stack pointer, program counter, general-purpose registers, and condition codes.</strong> All threads running in a process share the entire virtual address space of that process.</p>

<h4>Thread Execution Model</h4>

<p><strong>Each process begins life as a single thread called the main thread.</strong> At some point, the main thread creates a peer thread, and from this point in time the two threads run concurrently. Eventually, control passes to the peer thread via a context switch, because the main thread executes a slow system call such as read or sleep, or because it is interrupted by the system’s interval timer. The peer thread executes for a while before control passes back to the main thread, and so on.</p>

<p>Thread execution differs from processes in some important ways. Because a thread context is much smaller than a process context, a thread context switch is faster than a process context switch(由于thread context要比process context要小，所以上下文切换要比进程快). Another difference is that threads, unlike processes, are not organized in a rigid parent-child hierarchy. The threads associated with a process form a pool of peers, independent of which threads were created by which other threads. The main thread is distinguished from other threads only in the sense that it is always the first thread to run in the process. The main impact of this notion of a pool of peers is that a thread can kill any of its peers, or wait for any of its peers to terminate. Further, each peer can read and write the same shared data.(进程内的线程之间没有父子的继承关系，都是平等的，一个线程可以kill或者wait其它任何线程，主线程跟其它线程的唯一区别是它总是一个第一个被创建的)</p>

<h4>Terminating Threads</h4>

<p>A thread terminates in one of the following ways:</p>

<ul>
<li><p>The thread terminates implicitly when its top-level thread routine returns. 上层的thread返回退出了（看这的意思感觉又是有层级关系了，主线程退出了，由它发起的其它线程也会terminates implicitly</p></li>
<li><p>The thread terminates explicitly by calling the &ldquo;pthread exit&rdquo; function. If the main thread calls &ldquo;pthread exit&rdquo;, it waits for all other peer threads to terminate, and then terminates the main thread and the entire process with a return value of <code>thread_return</code>.</p></li>
<li><p>Some peer thread calls the Unix exit function, which terminates the process and all threads associated with the process. 通过结束整个进程</p></li>
<li><p>Another peer thread terminates the current thread by calling the &ldquo;pthread cancel&rdquo; function with the ID of the current thread. 被其它线程kill</p></li>
</ul>


<h4>Detaching Threads</h4>

<p>At any point in time, a thread is joinable or detached. A joinable thread can be reaped and killed by other threads. Its memory resources (such as the stack) are not freed until it is reaped by another thread. In contrast, a detached thread cannot be reaped or killed by other threads. Its memory resources are freed automatically by the system when it terminates. detached状态的thread在退出后会被操作系统自动回收。</p>

<p>By default, threads are created joinable. In order to avoid memory leaks, each joinable thread should either be explicitly reaped by another thread, or detached by a call to the &ldquo;pthread detach&rdquo; function. 线程默认都是joinable的</p>

<h4>Shared Variables in Threaded Programs</h4>

<p>From a programmer’s perspective, one of the attractive aspects of threads is the ease with which multiple threads can share the same program variables. However, this sharing can be tricky. In order to write correctly threaded programs, <strong>we must have a clear understanding of what we mean by sharing and how it works.</strong></p>

<p>Threads Memory Model</p>

<p>A pool of concurrent threads runs in the context of a process. Each thread has its own separate thread context, which includes a thread ID, stack, stack pointer, program counter, condition codes, and general-purpose register values. Each thread shares the rest of the process context with the other threads. <strong>This includes the entire user virtual address space, which consists of read-only text (code), read/write data, the heap, and any shared library code and data areas. The threads also share the same set of open files.</strong></p>

<p>In an operational sense, <strong>it is impossible for one thread to read or write the register values of another thread.</strong> On the other hand, <strong>any thread can access any location in the shared virtual memory.</strong> If some thread modifies a memory location, then every other thread will eventually see the change if it reads that location. Thus, registers are never shared, whereas virtual memory is always shared.</p>

<h4>Synchronizing Threads with Semaphores</h4>

<p>Shared variables can be convenient, but they introduce the possibility of nasty <strong>synchronization errors</strong></p>

<p>Semaphores</p>

<p>Semaphores provide a convenient way to ensure mutually exclusive access to shared variables. The basic idea is to associate a semaphore s, initially 1, with each shared variable (or related set of shared variables) and then surround the corresponding critical section with P (s) and V (s) operations.</p>

<ul>
<li><p>P (s): If s is nonzero, then P decrements s and returns immediately. If s is zero, then suspend the thread until s becomes nonzero and the process is restarted by a V operation. After restarting, the P operation decrements s and returns control to the caller.</p></li>
<li><p>V (s): The V operation increments s by 1. If there are any threads blocked at a P operation waiting for s to become nonzero, then the V operation restarts exactly one of these threads, which then completes its P operation by decrementing s.</p></li>
</ul>


<p>The test and decrement operations in P occur indivisibly, in the sense that once the semaphore s becomes nonzero, the decrement of s occurs without in- terruption. The increment operation in V also occurs indivisibly, in that it loads, increments, and stores the semaphore without interruption.  注意，关键是P或者V操作都是原子操作，不可分割，这是能够实现锁的关键。</p>

<p>The definitions of P and V ensure that a running program can never enter a state where a properly initialized semaphore has a negative value. This property, known as the semaphore invariant, provides a powerful tool for controlling the trajectories of concurrent programs</p>

<p>Synchronizing Threads with Semaphores</p>

<p>A semaphore that is used in this way to protect shared variables is called a binary semaphore because its value is always 0 or 1. <strong>Binary semaphores whose purpose is to provide mutual exclusion are often called mutexes.</strong> Performing a P operation on a mutex is called locking the mutex. Similarly, <strong>performing the V operation is called unlocking the mutex. A thread that has locked but not yet unlocked a mutex is said to be holding the mutex. </strong></p>

<p>Using Semaphores to Schedule Shared Resources</p>

<p>Another important use of semaphores, besides providing mutual exclusion, is to <strong>schedule accesses to shared resources.</strong> In this scenario, a thread uses a semaphore operation to notify another thread that some condition in the program state has become true. Two classical and useful examples are the producer-consumer and readers-writers problems.</p>

<p>Producer-Consumer Problem</p>

<p>A producer and consumer thread share a bounded buffer with n slots. The producer thread repeatedly produces new items and inserts them in the buffer. The consumer thread repeat- edly removes items from the buffer and then consumes (uses) them. Variants with multiple producers and consumers are also possible.</p>

<p>Since inserting and removing items involves updating shared variables, we must guarantee mutually exclusive access to the buffer. But guaranteeing mutual exclusion is not sufficient. We also need to schedule accesses to the buffer. If the buffer is full (there are no empty slots), then the producer must wait until a slot becomes available. Similarly, if the buffer is empty (there are no available items), then the consumer must wait until an item becomes available. 不仅要保证对共享变量的独享读写，而且还有保证先后顺序，必须要先生产再消费。</p>

<h4>Other Concurrency Issues</h4>

<p>You probably noticed that life got much more complicated once we were asked to synchronize accesses to shared data. Synchronization is a fundamentally difficult problem that raises issues that simply do not arise in ordinary sequential programs.</p>

<p>Thread Safety</p>

<p>A function is said to be thread-safe if and only if it will always produce correct results when called repeatedly from multiple concurrent threads. If a function is not thread-safe, then we say it is thread-unsafe.</p>

<p>四类线程非安全的函数：</p>

<ul>
<li><p>Functions that do not protect shared variables. This class of thread-unsafe function is relatively easy to make thread-safe: protect the shared variables with synchronization operations such as P and V . An advantage is that it does not require any changes in the calling program. A disadvantage is that the synchronization operations will slow down the function. 解决方案，加锁。</p></li>
<li><p>Functions that keep state across multiple invocations. A pseudorandom number generator is a simple example of this class of thread-unsafe function. The rand function is thread-unsafe because the result of the current invocation depends on an intermediate result from the previous iteration. When we call rand repeatedly from a single thread after seeding it with a call to srand, we can expect a repeatable sequence of numbers. However, this assumption no longer holds if multiple threads are calling rand. The only way to make a function such as rand thread-safe is to rewrite it so that it does not use any static data, relying instead on the caller to pass the state information in arguments. The disadvantage is that the programmer is now forced to change the code in the calling routine as well. 解决方案是不用static，而是通过caller传参数。</p></li>
<li><p>Functions that return a pointer to a static variable. Some functions, such as ctime and gethostbyname, compute a result in a static variable and then return a pointer to that variable. If we call such functions from concurrent threads, then disaster is likely, as results being used by one thread are silently overwritten by another thread.</p></li>
<li><p>Functions that call thread-unsafe functions. If a function f calls a thread-unsafe function g, is f thread-unsafe? It depends. If g is a class 2 function that relies on state across multiple invocations, then f is also thread- unsafe and there is no recourse short of rewriting g. However, if g is a class 1 or class 3 function, then f can still be thread-safe if you protect the call site and any resulting shared data with a mutex. 一个调用了线程非安全函数的函数是否是线程安全的呢？ 这得看情况。</p></li>
</ul>


<p>Reentrancy 可重入性</p>

<p>There is an important class of thread-safe functions, known as reentrant functions, that are characterized by the property that they do not reference any shared data when they are called by multiple threads. 可重入函数是线程安全函数的子集，也就是说可重入函数一定是线程安全的，反之不成立。</p>

<p>Reentrant functions are typically more efficient than nonreentrant thread- safe functions because they require no synchronization operations.</p>

<p>Races  竞争</p>

<p>A race occurs when the correctness of a program depends on one thread reaching point x in its control flow before another thread reaches point y. Races usually occur because programmers assume that threads will take some particular trajec- tory through the execution state space, forgetting the golden rule that threaded programs must work correctly for any feasible trajectory.</p>

<p>The scary thing is that whether we get the correct answer depends on how the kernel sched- ules the execution of the threads. On our system it fails, but on other systems it might work correctly, leaving the programmer blissfully unaware of a serious bug. 此类bug不易复现，因而很难修复</p>

<p>Deadlocks 死锁</p>

<p>Semaphores introduce the potential for a nasty kind of run-time error, called deadlock, where a collection of threads are blocked, waiting for a condition that will never be true.</p>

<p>Deadlock is an especially difficult issue because it is not always predictable. Some lucky execution trajectories will skirt the deadlock region, while others will be trapped by it. The implications for a programmer are scary. You might run the same program 1000 times without any problem, but then the next time it deadlocks.Or the program might work fine on one machine but deadlock on another. Worst of all, the error is often not repeatable because different executions have different trajectories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[csapp network programming]]></title>
    <link href="http://cs50Mu.github.io/blog/2016/08/29/csapp-network-programming/"/>
    <updated>2016-08-29T08:57:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2016/08/29/csapp-network-programming</id>
    <content type="html"><![CDATA[<h3>The Client-Server Programming Model</h3>

<p>Every network application is based on the client-server model. With this model, an application consists of a server process and one or more client processes. A server manages some resource, and it provides some service for its clients by manipulating that resource.</p>

<h3>Networks</h3>

<p>Clients and servers often run on separate hosts and communicate using the hard- ware and software resources of a computer network.</p>

<p>To a host, <strong>a network is just another I/O device that serves as a source and sink for data.</strong> An adapter plugged into an expansion slot on the I/O bus provides the physical interface to the network. Data received from the network is copied from the adapter across the I/O and memory buses into memory, typically by a DMA transfer. Similarly, data can also be copied from memory to the network.</p>

<h3>The Socket Interface</h3>

<p>Internet clients and servers communicate by sending and receiving streams of bytes over connections. A connection is point-to-point in the sense that it connects a pair of processes. It is full-duplex in the sense that data can flow in both directions <strong>at the same time.</strong> And it is reliable in the sense that—barring some catastrophic failure such as a cable cut by the proverbial careless backhoe operator—the stream of bytes sent by the source process is eventually received by the destination process in the same order it was sent.</p>

<p>A socket is an end point of a connection. Each socket has a corresponding socket address that consists of an Internet address and a 16-bit integer port, and is denoted by address:port. The port in the client’s socket address is assigned automatically by the kernel when the client makes a connection request, and is known as an ephemeral port. However, the port in the server’s socket address is typically some well-known port that is associated with the service. For example, Web servers typically use port 80, and email servers use port 25. 客户端的端口是由内核自动指定的，服务器的端口是事先手动定义好的。</p>

<p>A connection is uniquely identified by the socket addresses of its two end-points. This pair of socket addresses is known as a socket pair. 一个connection由两端的socket唯一确定。</p>

<p>The sockets interface is a set of functions that are used in conjunction with the Unix I/O functions to build network applications.</p>

<h3>Web Servers</h3>

<p>Web clients and servers interact using a text-based application-level protocol known as HTTP (Hypertext Transfer Protocol). HTTP is a simple protocol. A Web client (known as a browser) opens an Internet connection to a server and requests some content. The server responds with the requested content and then closes the connection. The browser reads the content and displays it on the screen.</p>

<p>What distinguishes Web services from conventional file retrieval services such as FTP? The main difference is that Web content can be written in a language known as HTML (Hypertext Markup Language). An HTML program (page) contains instructions (tags) that tell the browser how to display various text and graphical objects in the page. HTTP服务跟其它web服务的区别</p>

<h4>Web Content</h4>

<p>To Web clients and servers, content is a sequence of bytes with an associated MIME (Multipurpose Internet Mail Extensions) type. Web servers provide content to clients in two different ways:</p>

<ul>
<li><p>Fetch a disk file and return its contents to the client. The disk file is known as static content and the process of returning the file to the client is known as serving static content.</p></li>
<li><p>Run an executable file and return its output to the client. The output produced by the executable at run time is known as dynamic content, and the process of running the program and returning its output to the client is known as serving dynamic content.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[csapp system level io]]></title>
    <link href="http://cs50Mu.github.io/blog/2016/08/28/csapp-system-level-io/"/>
    <updated>2016-08-28T16:42:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2016/08/28/csapp-system-level-io</id>
    <content type="html"><![CDATA[<h3>概览</h3>

<p>是什么？</p>

<p>Input/output (I/O) is the process of copying data between main memory and external devices such as disk drives, terminals, and networks. An input operation copies data from an I/O device to main memory, and an output operation copies data from memory to a device.</p>

<p>为什么？</p>

<p>All language run-time systems provide higher-level facilities for performing I/O. For example, ANSI C provides the standard I/O library, with functions such as printf and scanf that perform buffered I/O. The C++ language provides similar functionality with its overloaded &lt;&lt; (“put to”) and >> (“get from”) operators. On Unix systems, these higher-level I/O functions are implemented using system-level Unix I/O functions provided by the kernel. <strong>Most of the time, the higher-level I/O functions work quite well and there is no need to use Unix I/O directly. So why bother learning about Unix I/O?</strong></p>

<ul>
<li><p>Understanding Unix I/O will help you understand other systems concepts. I/O is integral to the operation of a system, and because of this we often encounter circular dependences between I/O and other systems ideas.</p></li>
<li><p>Sometimes you have no choice but to use Unix I/O. There are some important cases where using higher-level I/O functions is either impossible or inappro- priate. For example, the standard I/O library provides no way to access file metadata such as file size or file creation time. Further, there are problems with the standard I/O library that make it risky to use for network programming.</p></li>
</ul>


<h3>Unix I/O</h3>

<p>A Unix file is a sequence of m bytes.</p>

<p>All I/O devices, such as networks, disks, and terminals, are modeled as files, and all input and output is performed by reading and writing the appropriate files. This elegant mapping of devices to files allows the Unix kernel to export a simple, low-level application interface, known as Unix I/O, that enables all input and output to be performed in a uniform and consistent way. 所有的io设备都被抽象成文件，对设备的输入输出操作被抽象成对文件的读和写操作。</p>

<p>针对文件的基本操作：</p>

<ul>
<li>Opening files. An application announces its intention to access an I/O device by asking the kernel to open the corresponding file. The kernel returns a small nonnegative integer, called a descriptor, that identifies the file in all subsequent operations on the file. The kernel keeps track of all information about the open file. The application only keeps track of the descriptor.</li>
</ul>


<p>Each process created by a Unix shell begins life with three open files: standard input (descriptor 0), standard output (descriptor 1), and standard error (descriptor 2). The header file <code>&lt;unistd.h&gt;</code> defines constants <code>STDIN_ FILENO</code>, <code>STDOUT_FILENO</code>, and <code>STDERR_FILENO</code>, which can be used instead of the explicit descriptor values. 进程从出生自带三个打开的文件：标准输入、标准输出和标准错误输出。</p>

<ul>
<li><p>Changing the current file position. The kernel maintains a file position k, ini- tially 0, for each open file. The file position is a byte offset from the beginning of a file. An application can set the current file position k explicitly by per- forming a seek operation.</p></li>
<li><p>Reading and writing files. A read operation copies n > 0 bytes from a file to memory, starting at the current file position k, and then incrementing k by n. Given a file with a size of m bytes, performing a read operation when k ≥ m triggers a condition known as end-of-file (EOF), which can be detected by the application. There is no explicit “EOF character” at the end of a file. 在文件中并不存在EOF这个字符，EOF是由操作系统触发的。</p></li>
<li><p>Closing files. When an application has finished accessing a file, it informs the kernel by asking it to close the file. The kernel responds by freeing the data structures it created when the file was opened and restoring the descriptor to a pool of available descriptors. When a process terminates for any reason, the kernel closes all open files and frees their memory resources.</p></li>
</ul>


<p>读或者写函数有时候返回的字节数要比你要求的要少，这并不代表有错，出现这种情形的原因有以下几点(In some situations, read and write transfer fewer bytes than the application requests. Such short counts do not indicate an error. They occur for a number of reasons)：</p>

<ul>
<li><p>Encountering EOF on reads. Suppose that we are ready to read from a file that contains only 20 more bytes from the current file position and that we are reading the file in 50-byte chunks. Then the next read will return a short count of 20, and the read after that will signal EOF by returning a short count of zero. 读的时候碰到EOF了。</p></li>
<li><p>Reading text lines from a terminal. If the open file is associated with a terminal (i.e., a keyboard and display), then each read function will transfer one text line at a time, returning a short count equal to the size of the text line(A text line is a sequence of ASCII characters terminated by a newline character.). 从终端读的时候，是按行返回的，用户输入了几个字符就会返回几个。</p></li>
<li><p>Reading and writing network sockets. If the open file corresponds to a network socket (Section 11.3.3), then internal buffering constraints and long network delays can cause read and write to return short counts. Short counts can also occur when you call read and write on a Unix pipe, an interprocess communication mechanism that is beyond our scope. 从socket返回时，由于buffer或者网络延迟。</p></li>
</ul>


<p>In practice, you will never encounter short counts when you read from disk files except on EOF, and you will never encounter short counts when you write to disk files. However, if you want to build robust (reliable) network applications such as Web servers, then you must deal with short counts by repeatedly calling read and write until all requested bytes have been transferred. 实际在从硬盘文件中读的时候，除了碰到EOF其它时候都不应该遇到返回字节数少的情况；在往硬盘文件中写的时候，任何时候都不应该出现这种情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[csapp exceptional control flow]]></title>
    <link href="http://cs50Mu.github.io/blog/2016/08/26/csapp-exceptional-control-flow/"/>
    <updated>2016-08-26T12:08:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2016/08/26/csapp-exceptional-control-flow</id>
    <content type="html"><![CDATA[<h3>Chapter 8 Exceptional Control Flow</h3>

<p>从一上电开始，CPU就在不停得执行指令，从第k个指令转到k+1个指令执行，叫做指令转移(control transfer)，一堆指令转移的集合就叫控制流(flow of control or control flow of the process)。</p>

<p>最简单的控制流就是一条接着一条的执行，只要执行的指令在内存中都是毗邻的，不需要跳转。当然，由于程序逻辑上的一些需求（比如分支、函数调用、调用返回）不可避免的会产生跳转。</p>

<p>但还有其它一些跳转需求，是跟程序内部执行逻辑无关的，比如硬件时钟、磁盘IO、创建子进程等(a hardware timer goes off at regular intervals and must be dealt with. Packets arrive at the network adapter and must be stored in memory. Programs request data from a disk and then sleep until they are notified that the data are ready. Parent processes that create child processes must be notified when their children terminate.) 对于这些情形，现代操作系统也是通过跳转来应对的。这些跳转被统称为exceptional control flow (ECF). ECF可以发生在一个计算机系统的各个层面，比如硬件层面、操作系统层面、应用程序层面等。(Exceptional control flow occurs at all levels of a computer system. For example, at the hardware level, events detected by the hardware trigger abrupt control transfers to exception handlers. At the operating systems level, the kernel transfers control from one user process to another via context switches. At the application level, a process can send a signal to another process that abruptly transfers control to a signal handler in the recipient. An individual program can react to errors by sidestepping the usual stack discipline and making nonlocal jumps to arbitrary locations in other functions)</p>

<p>那为什么要理解ECF呢？</p>

<ul>
<li>有助于理解重要的操作系统概念。ECF is the basic mechanism that operating systems use to implement I/O, processes, and virtual memory. Before you can really understand these important ideas, you need to understand ECF.</li>
<li>有助于理解应用程序是如何跟操作系统交互的。Applications request services from the operating system by using a form of ECF known as a trap or system call. For example, writing data to a disk, reading data from a network, creating a new process, and terminating the current process are all accomplished by application programs invoking system calls. Understanding the basic system call mechanism will help you understand how these services are provided to applications.</li>
<li>有助于理解并发(concurrency)。ECF is a basic mechanism for implementing concurrency in computer systems. An exception handler that interrupts the execution of an application program, processes and threads whose execution overlap in time, and a signal handler that interrupts the execution of an application program are all examples of concurrency in action. Understanding ECF is a first step to understanding concurrency.
有助于理解软件层面的异常(software exceptions)是如何工作的。Languages such as C++ and Java provide software exception mechanisms via try, catch, and throw statements. Software exceptions allow the program to make nonlocal jumps (i.e., jumps that violate the usual call/return stack discipline) in response to error conditions. Nonlocal jumps are a form of application-level ECF, and are provided in C via the setjmp and longjmp functions. Understanding these low-level functions will help you understand how higher-level software exceptions can be implemented.</li>
</ul>


<h4>8.1 Exceptions</h4>

<p>异常部分是由硬件实现的，部分是由操作系统实现的(Exceptions are a form of exceptional control flow that are implemented partly by the hardware and partly by the operating system.)。</p>

<p>An exception is an abrupt change in the control flow in response to some change in the processor’s state. The change in state is known as an event. The event might be directly related to the execution of the current instruction. For example, a virtual memory page fault occurs, an arithmetic overflow occurs, or an instruction attempts a divide by zero. On the other hand, the event might be unrelated to the execution of the current instruction. For example, a system timer goes off or an I/O request completes.（状态的改变我们称之为事件，事件可能跟正在执行的指令相关，比如内存页错误；也可能与当前执行的指令不相干，比如CPU时间到了。）</p>

<p>不管是哪种情况，都会跳到对应的异常处理程序那里执行。(In any case, when the processor detects that the event has occurred, it makes an indirect procedure call (the exception), through a jump table called an exception table, to an operating system subroutine (the exception handler) that is specifically designed to process this particular kind of event.)</p>

<p>异常处理程序处理完以后，可能会发生以下三种情况的一种：</p>

<ul>
<li>The handler returns control to the current instruction Icurr, the instruction that was executing when the event occurred.</li>
<li>The handler returns control to Inext, the instruction that would have executed next had the exception not occurred.</li>
<li>The handler aborts the interrupted program.</li>
</ul>


<h5>Classes of Exceptions</h5>

<p>异常可以被分为4类：interrupts, traps, faults, and aborts.
&ndash; Interrupts</p>

<p>Interrupts occur asynchronously as a result of signals from I/O devices that are external to the processor. Hardware interrupts are asynchronous in the sense that they are not caused by the execution of any particular instruction. Exception handlers for hardware interrupts are often called interrupt handlers.</p>

<p>这里讲到的asynchronous和synchronous的意思：Asynchronous exceptions occur as a result of events in I/O devices that are external to the processor. Synchronous exceptions occur as a direct result of executing an instruction.</p>

<p>interrupt的处理过程：</p>

<p>I/O devices such as network adapters, disk controllers, and timer chips trigger interrupts by signaling a pin on the processor chip and placing onto the system bus the exception number that identifies the device that caused the interrupt.</p>

<p>After the current instruction finishes executing, the processor notices that the interrupt pin has gone high, reads the exception number from the system bus, and then calls the appropriate interrupt handler. When the handler returns, it returns control to the next instruction (i.e., the instruction that would have followed the current instruction in the control flow had the interrupt not occurred). The effect is that the program continues executing as though the interrupt had never happened.</p>

<ul>
<li>Traps and System Calls</li>
</ul>


<p>Traps</p>

<p>Traps are intentional exceptions that occur as a result of executing an instruction. Like interrupt handlers, trap handlers return control to the next instruction. The most important use of traps is to provide a procedure-like interface between user programs and the kernel known as a system call.</p>

<p>User programs often need to request services from the kernel such as reading a file (read), creating a new process (fork), loading a new program (execve), or terminating the current process (exit). To allow controlled access to such kernel services, processors provide a special “syscall n” instruction that user programs can execute when they want to request service n. Executing the syscall instruction causes a trap to an exception handler that decodes the argument and calls the appropriate kernel routine.</p>

<p>From a programmer’s perspective, a system call is identical to a regular function call. However, their implementations are quite different. Regular functions run in user mode, which restricts the types of instructions they can execute, and they access the same stack as the calling function. A system call runs in kernel mode, which allows it to execute instructions, and accesses a stack defined in the kernel.</p>

<p>Faults</p>

<p>Faults result from error conditions that a handler might be able to correct. When a fault occurs, the processor transfers control to the fault handler. If the handler is able to correct the error condition, it returns control to the faulting instruction, thereby reexecuting it. Otherwise, the handler returns to an abort routine in the kernel that terminates the application program that caused the fault. 出现Fault后，要么经Fault handler处理后，原来的指令重新跑；要么直接Abort程序。</p>

<p>A classic example of a fault is the page fault exception, which occurs when an instruction references a virtual address whose corresponding physical page is not resident in memory and must therefore be retrieved from disk. As we will see in Chapter 9, a page is a contiguous block (typically 4 KB) of virtual memory. The page fault handler loads the appropriate page from disk and then returns control to the instruction that caused the fault. When the instruction executes again, the appropriate physical page is resident in memory and the instruction is able to run to completion without faulting.</p>

<p>Aborts</p>

<p>Aborts result from unrecoverable fatal errors, typically hardware errors such as parity errors that occur when DRAM or SRAM bits are corrupted. Abort handlers never return control to the application program. The handler returns control to an abort routine that terminates the application program. Abort handler不会把控制权返回给应用程序了。</p>

<h4>Processes 进程</h4>

<p>Exceptions are the basic building blocks that allow the operating system to provide the notion of a process, one of the most profound and successful ideas in computer science. 有了异常才能谈进程，异常机制是操作系统实现进程的基础。</p>

<p>When we run a program on a modern system, we are presented with the illusion that our program is the only one currently running in the system. Our program appears to have exclusive use of both the processor and the memory. The processor appears to execute the instructions in our program, one after the other, without interruption. Finally, the code and data of our program appear to be the only objects in the system’s memory. These illusions are provided to us by the notion of a process. 进程是个抽象概念。</p>

<p>Each program in the system runs in the context of some process. The context consists of the state that the program needs to run correctly. This state includes <strong>the program’s code and data stored in memory, its stack, the contents of its general- purpose registers, its program counter, environment variables, and the set of open file descriptors.</strong> 解释了进程上下文都包括哪些东西。</p>

<p>进程给应用程序提供了两个关键抽象：</p>

<blockquote><p>An independent logical control flow that provides the illusion that our pro- gram has exclusive use of the processor.</p>

<p>A private address space that provides the illusion that our program has exclu- sive use of the memory system.</p></blockquote>

<p>Logical Control Flow</p>

<p>The single physical control flow of the processor is partitioned into logical flows, one for each process.</p>

<p>Concurrent Flows</p>

<p>A logical flow whose execution overlaps in time with another flow is called a concurrent flow, and the two flows are said to run concurrently. More precisely, flows X and Y are concurrent with respect to each other if and only if X begins after Y begins and before Y finishes, or Y begins after X begins and before X finishes.  并发并不是我们平常理解的那个意思，只要两个进程的逻辑流的执行时间有重叠，就算并发了。</p>

<p>Notice that the idea of concurrent flows is independent of the number of processor cores or computers that the flows are running on. If two flows overlap in time, then they are concurrent, even if they are running on the same processor. However, we will sometimes find it useful to identify a proper subset of concurrent flows known as parallel flows. If two flows are running concurrently on different processor cores or computers, then we say that they are parallel flows, that they are running in parallel, and have parallel execution. 解了我许久的一个困惑，那就是并发和并行到底是什么意思？？这里讲的就很清楚了，并发(concurrency)跟CPU核数是无关的，它只跟逻辑流的执行时间有关系，只要两个进程逻辑流的执行时间有重叠，那么他们就是并发的，即使它们是运行在同一个核上。并行(parallel)是并发的子集了，就是说，如果两个进程已经是并发了，而且还是运行在不同的核上或计算机上，那它们就是并行的了。</p>

<p>Private Address Space 私有内存空间</p>

<p>A process provides each program with its own private address space. This space is private in the sense that a byte of memory associated with a particular address in the space cannot in general be read or written by any other process.</p>

<p>User and Kernel Modes 用户模式和内核模式</p>

<p>In order for the operating system kernel to provide an airtight process abstraction, the processor must provide a mechanism that restricts the instructions that an application can execute, as well as the portions of the address space that it can access.</p>

<p>Processors typically provide this capability with a mode bit in some control register that characterizes the privileges that the process currently enjoys. When the mode bit is set, the process is running in kernel mode (sometimes called supervisor mode). A process running in kernel mode can execute any instruction in the instruction set and access any memory location in the system.</p>

<p>When the mode bit is not set, the process is running in user mode. A process in user mode is not allowed to execute privileged instructions that do things such as halt the processor, change the mode bit, or initiate an I/O operation. Nor is it allowed to directly reference code or data in the kernel area of the address space. Any such attempt results in a fatal protection fault. User programs must instead access kernel code and data indirectly via the system call interface.</p>

<p>A process running application code is initially in user mode. The only way for the process to change from user mode to kernel mode is via an exception such as an interrupt, a fault, or a trapping system call. When the exception occurs, and control passes to the exception handler, the processor changes the mode from user mode to kernel mode. The handler runs in kernel mode. When it returns to the application code, the processor changes the mode from kernel mode back to user mode.</p>

<p>Context Switches 上下文切换</p>

<p>The operating system kernel implements multitasking using a higher-level form of exceptional control flow known as a context switch. The context switch mecha- nism is built on top of the lower-level exception mechanism. 上下文切换也是基于异常做的。</p>

<p>The kernel maintains a context for each process. The context is the state that the kernel needs to restart a preempted process. It consists of the values of objects such as the general purpose registers, the floating-point registers, the program counter, user’s stack, status registers, kernel’s stack, and various kernel data structures such as a page table that characterizes the address space, a process table that contains information about the current process, and a file table that contains information about the files that the process has opened.</p>

<p>At certain points during the execution of a process, the kernel can decide to preempt the current process and restart a previously preempted process. This decision is known as scheduling, and is handled by code in the kernel called the scheduler. When the kernel selects a new process to run, we say that the kernel has scheduled that process. After the kernel has scheduled a new process to run, it preempts the current process and transfers control to the new process using a mechanism called a context switch that (1) saves the context of the current process, (2) restores the saved context of some previously preempted process, and (3) passes control to this newly restored process.</p>

<p>A context switch can occur while the kernel is executing a system call on behalf of the user. If the system call blocks because it is waiting for some event to occur, then the kernel can put the current process to sleep and switch to another process. For example, if a read system call requires a disk access, the kernel can opt to perform a context switch and run another process instead of waiting for the data to arrive from the disk. Another example is the sleep system call, which is an explicit request to put the calling process to sleep. In general, even if a system call does not block, the kernel can decide to perform a context switch rather than return control to the calling process.</p>

<p>A context switch can also occur as a result of an interrupt. For example, all systems have some mechanism for generating periodic timer interrupts, typically every 1 ms or 10 ms. Each time a timer interrupt occurs, the kernel can decide that the current process has run long enough and switch to a new process.</p>

<p>Creating and Terminating Processes 进程的创建和销毁</p>

<p>From a programmer’s perspective, we can think of a process as being in one of three states，进程的三种状态：</p>

<blockquote><p>Running. The process is either executing on the CPU or is waiting to be executed and will eventually be scheduled by the kernel. 注意这个running不一定是说正在跑，只是一个可调度的状态，叫ready更好一点。</p>

<p>Stopped. The execution of the process is suspended and will not be scheduled. A process stops as a result of receiving a SIGSTOP, SIGTSTP, SIGTTIN, or SIGTTOU signal, and it remains stopped until it receives a SIGCONT signal, at which point it can begin running again. 不可调度状态，暂停了，但还能恢复</p>

<p>Terminated. The process is stopped permanently. A process becomes termi- nated for one of three reasons: (1) receiving a signal whose default action is to terminate the process, (2) returning from the main routine, or (3) calling the exit function  永久结束了</p></blockquote>

<p>Fork</p>

<p>A parent process creates a new running child process by calling the fork function. fork有以下特点：</p>

<pre><code>#include "csapp.h"

int main()
{
    pid_t pid;
    int x = 1;

    pid = Fork(); if(pid==0){ /*Child*/
        printf("child : x=%d\n", ++x);
        exit(0); }
    /* Parent */
    printf("parent: x=%d\n", --x);
    exit(0); }
}

output:
unix&gt; ./fork 
parent: x=0 
child : x=2
</code></pre>

<blockquote><p>Call once, return twice. The fork function is called once by the parent, but it returns twice: once to the parent and once to the newly created child. This is fairly straightforward for programs that create a single child. But programs with multiple instances of fork can be confusing and need to be reasoned about carefully.</p>

<p>Concurrent execution. The parent and the child are separate processes that run concurrently. The instructions in their logical control flows can be inter- leaved by the kernel in an arbitrary way. When we run the program on our system, the parent process completes its printf statement first, followed by the child. However, on another system the reverse might be true. In general, as programmers we can never make assumptions about the interleaving of the instructions in different processes.</p>

<p>Duplicate but separate address spaces. If we could halt both the parent and the child immediately after the fork function returned in each process, we would see that the address space of each process is identical. Each process has the same user stack, the same local variable values, the same heap, the same global variable values, and the same code. Thus, in our example program, local variable x has a value of 1 in both the parent and the child when the fork function returns in line 8. However, since the parent and the child are separate processes, they each have their own private address spaces. Any subsequent changes that a parent or child makes to x are private and are not reflected in the memory of the other process. This is why the variable x has different values in the parent and child when they call their respective printf statements.</p>

<p>Shared files. When we run the example program, we notice that both parent and child print their output on the screen. The reason is that the child inherits all of the parent’s open files. When the parent calls fork, the stdout file is open and directed to the screen. The child inherits this file and thus its output is also directed to the screen.</p></blockquote>

<p>Reaping Child Processes</p>

<p>When a process terminates for any reason, the kernel does not remove it from the system immediately. Instead, the process is kept around in a terminated state until it is reaped by its parent. When the parent reaps the terminated child, the kernel passes the child’s exit status to the parent, and then discards the terminated process, at which point it ceases to exist. A terminated process that has not yet been reaped is called a zombie. 已经是terminated状态但还没有被reaped的process叫僵尸程序</p>

<p>If the parent process terminates without reaping its zombie children, the kernel arranges for the init process to reap them. The init process has a PID of 1 and is created by the kernel during system initialization. Long-running programs such as shells or servers should always reap their zombie children. Even though zombies are not running, they still consume system memory resources. 父进程没收割的僵尸process会被init进程代为收割。</p>

<h4>Signals 信号</h4>

<p>A signal is a small message that notifies a process that an event of some type has occurred in the system.</p>

<p>Each signal type corresponds to some kind of system event. <strong>Low-level hard-ware exceptions are processed by the kernel’s exception handlers and would not normally be visible to user processes. Signals provide a mechanism for exposing the occurrence of such exceptions to user processes.</strong> For example, if a process attempts to divide by zero, then the kernel sends it a SIGFPE signal (number 8). If a process executes an illegal instruction, the kernel sends it a SIGILL signal (number 4). If a process makes an illegal memory reference, the kernel sends it a SIGSEGV signal (number 11). Other signals correspond to higher-level soft- ware events in the kernel or in other user processes. For example, if you type a ctrl-c (i.e., press the ctrl key and the c key at the same time) while a process is running in the foreground, then the kernel sends a SIGINT (number 2) to the foreground process. A process can forcibly terminate another process by sending it a SIGKILL signal (number 9). When a child process terminates or stops, the kernel sends a SIGCHLD signal (number 17) to the parent. 信号为底层硬件异常与应用程序之间搭了一座桥梁。</p>

<p>信号的发和收</p>

<blockquote><p>Sending a signal. The kernel sends (delivers) a signal to a destination process by updating some state in the context of the destination process. The signal is delivered for one of two reasons: (1) The kernel has detected a system event such as a divide-by-zero error or the termination of a child process. (2) A process has invoked the kill function (discussed in the next section) to explicitly request the kernel to send a signal to the destination process. A process can send a signal to itself.</p>

<p>Receiving a signal. A destination process receives a signal when it is forced by the kernel to react in some way to the delivery of the signal. The process can either ignore the signal, terminate, or catch the signal by executing a user-level function called a signal handler. Receipt of a signal triggers a control transfer to a signal handler. After it finishes processing, the handler returns control to the interrupted program. 接收信号也会打断正常的逻辑流。</p></blockquote>

<p>A signal that has been sent but not yet received is called a pending signal. At any point in time, there can be <strong>at most one pending signal of a particular type.</strong> If a process has a pending signal of type k, then any subsequent signals of type k sent to that process are not queued; <strong>they are simply discarded.</strong></p>

<p>A process can selectively <strong>block the receipt of certain signals.</strong> When a signal is blocked, it can be delivered, but the resulting pending signal will not be received until the process unblocks the signal. For each process, the kernel maintains the set of pending signals in the <strong>pending bit vector</strong>, and the set of blocked signals in the <strong>blocked bit vector</strong>. The kernel sets bit k in pending whenever a sig- nal of type k is delivered and clears bit k in pending whenever a signal of type k is received.</p>

<p>进程接收信号的流程</p>

<p>When the kernel is returning from an exception handler and is ready to pass control to process p, it checks the set of unblocked pending signals (pending &amp; ~blocked) for process p. If this set is empty (the usual case), then the kernel passes control to the next instruction (Inext) in the logical control flow of p.</p>

<p>However, if the set is nonempty, then the kernel chooses some signal k in the set (typically the smallest k) and forces p to receive signal k. The receipt of the signal triggers some action by the process. Once the process completes the action, then control passes back to the next instruction (Inext ) in the logical control flow of p. Each signal type has a predefined default action, which is one of the following: 1) The process terminates. 2) The process terminates and dumps core. 3) The process stops until restarted by a SIGCONT signal. 4) The process ignores the signal. 一般收到信号后的默认行为是可以改的，但SIGSTOP和SIGKILL是不允许改的。</p>

<p>Signal Handling Issues 信号处理存在的问题</p>

<blockquote><p>Pending signals are blocked. Unix signal handlers typically block pending signals of the type currently being processed by the handler. For example, suppose a process has caught a SIGINT signal and is currently running its SIGINT handler. If another SIGINT signal is sent to the process, then the SIGINT will become pending, but will not be received until after the handler returns. 在等待的信号会被阻塞住，要等前面的信号处理完才能处理它。</p>

<p>Pending signals are not queued. There can be at most one pending signal of any particular type. Thus, if two signals of type k are sent to a destination process while signal k is blocked because the destination process is currently executing a handler for signal k, then the second signal is simply discarded; it is not queued. The key idea is that the existence of a pending signal merely indicates that at least one signal has arrived. 最多只能pending一个信号，再多的信号就直接被抛弃了。</p>

<p>System calls can be interrupted. System calls such as read, wait, and accept that can potentially block the process for a long period of time are called slow system calls. On some systems, slow system calls that are interrupted when a handler catches a signal do not resume when the signal handler returns, but instead return immediately to the user with an error condition and errno set to EINTR. 当收到信号后，就算系统调用也会被打断，关键是在某些系统上被打断的系统调用在signal handler返回后不会自动重启。</p></blockquote>

<p>Explicitly Blocking and Unblocking Signals  显式block和unblock信号</p>

<p>Applications can explicitly block and unblock selected signals using the sigproc- mask function, The sigprocmask function changes the set of currently blocked signals.</p>

<p>Synchronizing Flows to Avoid Nasty Concurrency Bugs</p>

<p>并发容易引发bug, 并且很难定位。</p>

<p>The problem of how to program concurrent flows that read and write the same storage locations has challenged generations of computer scientists. In general,<strong>the number of potential interleavings of the flows is exponential in the number of instructions. Some of those interleavings will produce correct answers, and others will not.</strong> The fundamental problem is to somehow synchronize the concurrent flows so as to allow the largest set of feasible interleavings such that each of the feasible interleavings produces a correct answer.</p>

<p>Such errors are enormously difficult to debug because it is often impossible to test every interleaving. You may run the code a billion times without a problem, but then the next test results in an interleaving that triggers the race.</p>

<h4>Nonlocal Jumps</h4>

<p>C provides a form of user-level exceptional control flow, called a nonlocal jump, that transfers control directly from one function to another currently executing function without having to go through the normal call-and-return sequence. Non- local jumps are provided by the setjmp and longjmp functions.</p>

<p>The setjmp function saves the current calling environment in the env buffer, for later use by longjmp, and returns a 0. The calling environment includes the program counter, stack pointer, and general purpose registers.</p>

<p>The longjmp function restores the calling environment from the env buffer and then triggers a return from the most recent setjmp call that initialized env. The setjmp then returns with the nonzero return value retval.</p>

<p>The interactions between setjmp and longjmp can be confusing at first glance. The setjmp function is called once, but returns multiple times: once when the setjmp is first called and the calling environment is stored in the env buffer, and once for each corresponding longjmp call. On the other hand, the longjmp function is called once, but never returns.  调用关系确实有点乱啊。</p>

<p>An important application of nonlocal jumps is to permit an immediate return from a deeply nested function call, usually as a result of detecting some error condition. If an error condition is detected deep in a nested function call, we can use a nonlocal jump to return directly to a common localized error handler instead of laboriously unwinding the call stack.  应用之一：从很深的调用嵌套中直接跳到表层，而不是一层一层的解嵌套跳出(unwind the entire stack)。</p>

<p>Another important application of nonlocal jumps is to branch out of a signal handler to a specific code location, rather than returning to the instruction that was interrupted by the arrival of the signal. 应用之一：从signal handler里跳出来。</p>

<p>The exception mechanisms provided by C++ and Java are higher-level, more-structured versions of the C setjmp and longjmp functions. You can think of a catch clause inside a try statement as being akin to a setjmp function. Similarly, a throw statement is similar to a longjmp function. C++和Java中的exception是基于setjmp和longjmp实现的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thrift source code walkthrough]]></title>
    <link href="http://cs50Mu.github.io/blog/2016/08/19/thrift-source-code-walkthrough/"/>
    <updated>2016-08-19T11:24:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2016/08/19/thrift-source-code-walkthrough</id>
    <content type="html"><![CDATA[<p>准备学习一下thrift的源码，看的是Python版的，以下所有分析都是基于0.9.0版本的thrift</p>

<p>thrift整个逻辑结构是分层的，类似于网络模型的分层，从下到上依次为Transport层，它封装了底层的socket；Protocol层在Transport层的基础上实现了传输协议；</p>

<h3>Transport</h3>

<p>先看是如何用的，thrift client端的正确打开方式是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Make socket</span>
</span><span class='line'><span class="n">transport</span> <span class="o">=</span> <span class="n">TSocket</span><span class="o">.</span><span class="n">TSocket</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">9090</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Buffering is critical. Raw sockets are very slow</span>
</span><span class='line'><span class="n">transport</span> <span class="o">=</span> <span class="n">TTransport</span><span class="o">.</span><span class="n">TBufferedTransport</span><span class="p">(</span><span class="n">transport</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Wrap in a protocol</span>
</span><span class='line'><span class="n">protocol</span> <span class="o">=</span> <span class="n">TBinaryProtocol</span><span class="o">.</span><span class="n">TBinaryProtocol</span><span class="p">(</span><span class="n">transport</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create a client to use the protocol encoder</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">Calculator</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">protocol</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Connect!</span>
</span><span class='line'><span class="n">transport</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">ping</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>先看transport的初始化，其实是创建了一个socket，我们去源码里看一下到底是如何创建的，定位到<code>thrift.transport.TSocket</code>的TSocket类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TSocket</span><span class="p">(</span><span class="n">TSocketBase</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;Socket implementation of TTransport base.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">9090</span><span class="p">,</span> <span class="n">unix_socket</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Initialize a TSocket</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    @param host(str)  The host to connect to.</span>
</span><span class='line'><span class="sd">    @param port(int)  The (TCP) port to connect to.</span>
</span><span class='line'><span class="sd">    @param unix_socket(str)  The filename of a unix socket to connect to.</span>
</span><span class='line'><span class="sd">                             (host and port will be ignored.)</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">host</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">port</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">handle</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_unix_socket</span> <span class="o">=</span> <span class="n">unix_socket</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_timeout</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setHandle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">h</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">h</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">isOpen</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setTimeout</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ms</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">ms</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">_timeout</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">_timeout</span> <span class="o">=</span> <span class="n">ms</span> <span class="o">/</span> <span class="mf">1000.0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_timeout</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">res0</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_resolveAddr</span><span class="p">()</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">res</span> <span class="ow">in</span> <span class="n">res0</span><span class="p">:</span>       <span class="c">#   res is of structure:   (family, socktype, proto, canonname, sockaddr)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">res</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>    <span class="c">#  make a socket</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_timeout</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>      <span class="c">#    connect</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">res</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">res0</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>    <span class="c">#   if it&#39;s not the last, continue; or else raise exception</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>          <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'>        <span class="k">break</span>                     <span class="c">#    if there if one socket that can be connected, then we are happy</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_unix_socket</span><span class="p">:</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="s">&#39;Could not connect to socket </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">_unix_socket</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="s">&#39;Could not connect to </span><span class="si">%s</span><span class="s">:</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>      <span class="k">raise</span> <span class="n">TTransportException</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="n">TTransportException</span><span class="o">.</span><span class="n">NOT_OPEN</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">message</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sz</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buff</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">sz</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">errno</span><span class="o">.</span><span class="n">ECONNRESET</span> <span class="ow">and</span>
</span><span class='line'>          <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">platform</span> <span class="o">==</span> <span class="s">&#39;darwin&#39;</span> <span class="ow">or</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;freebsd&#39;</span><span class="p">))):</span>
</span><span class='line'>        <span class="c"># freebsd and Mach don&#39;t follow POSIX semantic of recv</span>
</span><span class='line'>        <span class="c"># and fail with ECONNRESET if peer performed shutdown.</span>
</span><span class='line'>        <span class="c"># See corresponding comment and code in TSocket::read()</span>
</span><span class='line'>        <span class="c"># in lib/cpp/src/transport/TSocket.cpp.</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="c"># Trigger the check to raise the END_OF_FILE exception below.</span>
</span><span class='line'>        <span class="n">buff</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">buff</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="n">TTransportException</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="n">TTransportException</span><span class="o">.</span><span class="n">END_OF_FILE</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">message</span><span class="o">=</span><span class="s">&#39;TSocket read 0 bytes&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">buff</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buff</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="n">TTransportException</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="n">TTransportException</span><span class="o">.</span><span class="n">NOT_OPEN</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">message</span><span class="o">=</span><span class="s">&#39;Transport not open&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sent</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">have</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">buff</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">sent</span> <span class="o">&lt;</span> <span class="n">have</span><span class="p">:</span>
</span><span class='line'>      <span class="n">plus</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">buff</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">plus</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">TTransportException</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="n">TTransportException</span><span class="o">.</span><span class="n">END_OF_FILE</span><span class="p">,</span>
</span><span class='line'>                                  <span class="n">message</span><span class="o">=</span><span class="s">&#39;TSocket sent 0 bytes&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sent</span> <span class="o">+=</span> <span class="n">plus</span>
</span><span class='line'>      <span class="n">buff</span> <span class="o">=</span> <span class="n">buff</span><span class="p">[</span><span class="n">plus</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">flush</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>比较重要的方法是open、read和write。open会初始化一个socket并且connect；read和write分别封装了底层socket库的recv和send方法。</p>

<p>再回到使用的角度上，注意它在初始的transport上又包了一个TBufferedTransport，这又是干嘛呢？正如注释中指出的那样，是给原始的socket接口包了一个buffer，
这样会减少对socket的读写，效率会高些，依然看下源码，定位到thrift.transport.TTransport的TBufferedTransport类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TBufferedTransport</span><span class="p">(</span><span class="n">TTransportBase</span><span class="p">,</span> <span class="n">CReadableTransport</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;Class that wraps another transport and buffers its I/O.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">  The implementation uses a (configurable) fixed-size read buffer</span>
</span><span class='line'><span class="sd">  but buffers all writes until a flush is performed.</span>
</span><span class='line'><span class="sd">  &quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">DEFAULT_BUFFER</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">trans</span><span class="p">,</span> <span class="n">rbuf_size</span><span class="o">=</span><span class="n">DEFAULT_BUFFER</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__trans</span> <span class="o">=</span> <span class="n">trans</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__wbuf</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf_size</span> <span class="o">=</span> <span class="n">rbuf_size</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">isOpen</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__trans</span><span class="o">.</span><span class="n">isOpen</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__trans</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__trans</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sz</span><span class="p">):</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">sz</span><span class="p">)</span>     <span class="c">#  默认从buffer读，buffer里有数据的话直接返回</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__trans</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">sz</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf_size</span><span class="p">)))</span>   <span class="c"># 否则的话就从socket读出buffer-size大小的数据缓存在buffer里</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">sz</span><span class="p">)</span>                                           <span class="c"># 在从buffer里返回要求大小的数据量</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__wbuf</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>       <span class="c"># 写操作的话就是一直往buffer里写，并不自动flush</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">flush</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__wbuf</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># reset wbuf before write/flush to preserve state on underlying failure</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__wbuf</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__trans</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__trans</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Implement the CReadableTransport interface.</span>
</span><span class='line'>  <span class="nd">@property</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cstringio_buf</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cstringio_refill</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">partialread</span><span class="p">,</span> <span class="n">reqlen</span><span class="p">):</span>
</span><span class='line'>    <span class="n">retstring</span> <span class="o">=</span> <span class="n">partialread</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">reqlen</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf_size</span><span class="p">:</span>
</span><span class='line'>      <span class="c"># try to make a read of as much as we can.</span>
</span><span class='line'>      <span class="n">retstring</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__trans</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__rbuf_size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># but make sure we do read reqlen bytes.</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">retstring</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">reqlen</span><span class="p">:</span>
</span><span class='line'>      <span class="n">retstring</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__trans</span><span class="o">.</span><span class="n">readAll</span><span class="p">(</span><span class="n">reqlen</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">retstring</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">(</span><span class="n">retstring</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__rbuf</span>
</span></code></pre></td></tr></table></div></figure>


<p>再来看看给server端用的socket</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TServerSocket</span><span class="p">(</span><span class="n">TSocketBase</span><span class="p">,</span> <span class="n">TServerTransportBase</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;Socket implementation of TServerTransport base.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">9090</span><span class="p">,</span> <span class="n">unix_socket</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">host</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">port</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_unix_socket</span> <span class="o">=</span> <span class="n">unix_socket</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">handle</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">listen</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">res0</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_resolveAddr</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">res</span> <span class="ow">in</span> <span class="n">res0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="n">socket</span><span class="o">.</span><span class="n">AF_INET6</span> <span class="ow">or</span> <span class="n">res</span> <span class="ow">is</span> <span class="n">res0</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># We need remove the old unix socket if the file exists and</span>
</span><span class='line'>    <span class="c"># nobody is listening on it.</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_unix_socket</span><span class="p">:</span>
</span><span class='line'>      <span class="n">tmp</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">res</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>      <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">tmp</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span><span class='line'>      <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>        <span class="n">eno</span><span class="p">,</span> <span class="n">message</span> <span class="o">=</span> <span class="n">err</span><span class="o">.</span><span class="n">args</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">eno</span> <span class="o">==</span> <span class="n">errno</span><span class="o">.</span><span class="n">ECONNREFUSED</span><span class="p">:</span>
</span><span class='line'>          <span class="n">os</span><span class="o">.</span><span class="n">unlink</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">res</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="p">,</span> <span class="s">&#39;settimeout&#39;</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>     <span class="c">#  accept会把返回的socket再用TSocket包一下</span>
</span><span class='line'>    <span class="n">client</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">TSocket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">setHandle</span><span class="p">(</span><span class="n">client</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Protocol</h3>

<p>这个模块定义的是传输协议，代码都放在protocol目录下。关于这一部分的作用，官网已经说的很清楚了，直接引用过来：</p>

<blockquote><p>The Protocol abstraction defines a mechanism to map in-memory data structures to a wire-format. In other words, a protocol specifies how datatypes use the underlying Transport to encode/decode themselves. Thus the protocol implementation governs the encoding scheme and is responsible for (de)serialization. Some examples of protocols in this sense include JSON, XML, plain text, compact binary etc.</p></blockquote>

<p>这个模块的接口如下：</p>

<blockquote><p>writeMessageBegin(name, type, seq)  <br/>
writeMessageEnd()  <br/>
writeStructBegin(name) <br/>
writeStructEnd() <br/>
writeFieldBegin(name, type, id)   <br/>
writeFieldEnd()    <br/>
writeFieldStop()   <br/>
writeMapBegin(ktype, vtype, size)   <br/>
writeMapEnd()    <br/>
writeListBegin(etype, size)   <br/>
writeListEnd()   <br/>
writeSetBegin(etype, size)    <br/>
writeSetEnd()     <br/>
writeBool(bool)     <br/>
writeByte(byte)     <br/>
writeI16(i16)     <br/>
writeI32(i32)    <br/>
writeI64(i64)    <br/>
writeDouble(double)      <br/>
writeString(string)</p>

<p>name, type, seq = readMessageBegin()</p>

<pre><code>             readMessageEnd()         
</code></pre>

<p>name = readStructBegin()</p>

<pre><code>  readStructEnd()          
</code></pre>

<p>name, type, id = readFieldBegin()</p>

<pre><code>            readFieldEnd()        
</code></pre>

<p>k, v, size = readMapBegin()</p>

<pre><code>        readMapEnd()       
</code></pre>

<p>etype, size = readListBegin()</p>

<pre><code>         readListEnd()      
</code></pre>

<p>etype, size = readSetBegin()</p>

<pre><code>         readSetEnd()      
</code></pre>

<p>bool = readBool()      <br/>
byte = readByte()    <br/>
i16 = readI16()     <br/>
i32 = readI32()    <br/>
i64 = readI64()    <br/>
double = readDouble()    <br/>
string = readString()</p></blockquote>

<p>一个可能的使用例子：</p>

<p>写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="k">def</span> <span class="nf">send_addPlan</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">header</span><span class="p">,</span> <span class="n">plan</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_oprot</span><span class="o">.</span><span class="n">writeMessageBegin</span><span class="p">(</span><span class="s">&#39;addPlan&#39;</span><span class="p">,</span> <span class="n">TMessageType</span><span class="o">.</span><span class="n">CALL</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_seqid</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="n">addPlan_args</span><span class="p">()</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">header</span> <span class="o">=</span> <span class="n">header</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">plan</span> <span class="o">=</span> <span class="n">plan</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_oprot</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_oprot</span><span class="o">.</span><span class="n">writeMessageEnd</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_oprot</span><span class="o">.</span><span class="n">trans</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>读</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="k">def</span> <span class="nf">recv_addPlan</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="p">):</span>
</span><span class='line'>    <span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">mtype</span><span class="p">,</span> <span class="n">rseqid</span><span class="p">)</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_iprot</span><span class="o">.</span><span class="n">readMessageBegin</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">mtype</span> <span class="o">==</span> <span class="n">TMessageType</span><span class="o">.</span><span class="n">EXCEPTION</span><span class="p">:</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">TApplicationException</span><span class="p">()</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_iprot</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">_iprot</span><span class="o">.</span><span class="n">readMessageEnd</span><span class="p">()</span>
</span><span class='line'>      <span class="k">raise</span> <span class="n">x</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">addPlan_result</span><span class="p">()</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_iprot</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_iprot</span><span class="o">.</span><span class="n">readMessageEnd</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">success</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">success</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">e</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="n">result</span><span class="o">.</span><span class="n">e</span>
</span><span class='line'>    <span class="k">raise</span> <span class="n">TApplicationException</span><span class="p">(</span><span class="n">TApplicationException</span><span class="o">.</span><span class="n">MISSING_RESULT</span><span class="p">,</span> <span class="s">&quot;addPlan failed: unknown result&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>先看write，它首先会调用writeMessageBegin方法，然后写入相应的内容，最后调用writeMessageEnd方法来结束写操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="k">def</span> <span class="nf">writeMessageBegin</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">seqid</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">strictWrite</span><span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">writeI32</span><span class="p">(</span><span class="n">TBinaryProtocol</span><span class="o">.</span><span class="n">VERSION_1</span> <span class="o">|</span> <span class="nb">type</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">writeString</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">writeI32</span><span class="p">(</span><span class="n">seqid</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">writeString</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">writeByte</span><span class="p">(</span><span class="nb">type</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">writeI32</span><span class="p">(</span><span class="n">seqid</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用writeMessageBegin的时候分为两种情况，严格写和普通写。严格写的时候需要先写入版本号和消息的类型，然后是消息名称、消息序列号。普通写只要依次写入消息名称、消息类型
和消息序列号即可。这其实只是相当于把header信息（也就是元信息）写进去了，写完这些以后才会写具体的数据，最后调用一下writeMessageEnd表示写消息结束（这个方法根据各个具体的协议会有不同的
实现，像在TBinaryProtocol里这个方法其实是空的，什么都不做）。</p>

<p>再看read，与写的过程类似，不过是反的，会先调用readMessageBegin，它会返回一个(name, type, seqid)的三元组，标识了收到的这条消息的名称、类型和序列号。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="k">def</span> <span class="nf">readMessageBegin</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sz</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">readI32</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">sz</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="n">version</span> <span class="o">=</span> <span class="n">sz</span> <span class="o">&amp;</span> <span class="n">TBinaryProtocol</span><span class="o">.</span><span class="n">VERSION_MASK</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">version</span> <span class="o">!=</span> <span class="n">TBinaryProtocol</span><span class="o">.</span><span class="n">VERSION_1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">TProtocolException</span><span class="p">(</span>
</span><span class='line'>          <span class="nb">type</span><span class="o">=</span><span class="n">TProtocolException</span><span class="o">.</span><span class="n">BAD_VERSION</span><span class="p">,</span>
</span><span class='line'>          <span class="n">message</span><span class="o">=</span><span class="s">&#39;Bad version in readMessageBegin: </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">sz</span><span class="p">))</span>
</span><span class='line'>      <span class="nb">type</span> <span class="o">=</span> <span class="n">sz</span> <span class="o">&amp;</span> <span class="n">TBinaryProtocol</span><span class="o">.</span><span class="n">TYPE_MASK</span>
</span><span class='line'>      <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">readString</span><span class="p">()</span>
</span><span class='line'>      <span class="n">seqid</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">readI32</span><span class="p">()</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">strictRead</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">TProtocolException</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="n">TProtocolException</span><span class="o">.</span><span class="n">BAD_VERSION</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">message</span><span class="o">=</span><span class="s">&#39;No protocol version header&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">trans</span><span class="o">.</span><span class="n">readAll</span><span class="p">(</span><span class="n">sz</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">type</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">readByte</span><span class="p">()</span>
</span><span class='line'>      <span class="n">seqid</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">readI32</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">seqid</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>类似的，读出header信息后，会继续读出具体的返回数据，视情况决定是否返回exception。</p>

<p>这一部分的分析有一个巨牛的资源，写的非常清楚： <br/>
<a href="http://houjixin.blog.163.com/blog/static/35628410201501654039437/">由浅入深了解Thrift（二）——Thrift的工作原理</a></p>

<h3>Processor</h3>

<p>这一块儿的代码是由thrift compiler自动生成的</p>

<h3>Server</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[baidu ife]]></title>
    <link href="http://cs50Mu.github.io/blog/2016/03/06/baidu-ife/"/>
    <updated>2016-03-06T10:25:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2016/03/06/baidu-ife</id>
    <content type="html"><![CDATA[<h3>盒模型及定位</h3>

<ul>
<li>用两种方法来实现一个背景色为红色、宽度为960px的<code>&lt;DIV&gt;</code>在浏览器中居中</li>
</ul>


<p>第一种方法：<code>margin:0px auto;</code></p>

<p>第二种方法：使用绝对定位，设置左边距离body<code>50%</code>，left-margin为div宽度的一半。</p>

<figure class='code'><figcaption><span>center</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#red</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span><span class="m">960px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span><span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span> <span class="m">-480px</span><span class="p">;</span>
</span><span class='line'><span class="c">/*    margin:0px auto; */</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>补充：   <br/>
像下面这样写css代码，使用 max-width 替代 width 可以使浏览器更好地处理小窗口的情况。这点在移动设备上显得尤为重要。    <br/>
有效的避免了如下问题：   <br/>
当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。</p>

<figure class='code'><figcaption><span>max-width</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#main</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">max-width</span><span class="o">:</span> <span class="m">600px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：<a href="http://zh.learnlayout.com/">学习css布局</a></p>

<ul>
<li>用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化</li>
</ul>


<p>第一种方法： 使用绝对定位，左边的块固定好，右边的块用<code>margin-left</code></p>

<figure class='code'><figcaption><span>absolute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nav-relative&quot;</span><span class="nt">&gt;</span>relative method<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;section&quot;</span><span class="nt">&gt;</span>的圆角矩形是复杂图案，无法直接用border-radius，请在不使用border-radius的情况下实现一个可复用的高度和宽度都自适应的圆角矩形请在不使用border-radius的情况下实现一个可复用的高度和宽&gt;度<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">section-below</span><span class="nt">&gt;</span>的圆角矩形是复杂图案，无法直接用border-radius，请在不使用border-radius的情况下实现一个可复用的高度和宽度都自适应的圆角矩形请在不使用border-radius的情况下实现一个可复用的高度&gt;和宽度 都自适应的圆角矩形请在不使用border-radius的情况下实现一个可复用的高度和宽度<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>absolute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span><span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.nav-relative</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span><span class="m">0px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span><span class="m">200px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="nb">blue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.section</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span><span class="m">200px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="nb">green</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.section-below</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="nb">khaki</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二种方法：使用float，左边的使用向左浮动，右边的用<code>margin-left</code></p>

<figure class='code'><figcaption><span>float</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nav-float&quot;</span><span class="nt">&gt;</span>haha hahah  float method<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;section-float&quot;</span><span class="nt">&gt;</span>圆角矩形是复杂图案，无法直接用border-radius，请在不使用border-radius的情况下实现一个可复用的高度和宽度都自适应的圆角矩形请在不使用border-radius的情况下实现一个可复用<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>的圆角矩形是复杂图案，无法直接用border-radius，请在不使用border-radius的情况下实现一个可复用的高度和宽度都自适应的圆角矩形请在不使用border-radius的情况下实现一个可复用的高度和宽度 都自适应的圆角矩形请在不使用border-radius的情况下实现一个可复用的高度和宽度<span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>float</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.nav-float</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span><span class="m">200px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.section-float</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span><span class="m">200px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.div3</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">200px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="n">grey</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三种方法：用BFC（Block Formatting Context）来实现</p>

<figure class='code'><figcaption><span>bfc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>left<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;right&quot;</span><span class="nt">&gt;</span>right<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  flying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.html
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>bfc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.left</span><span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.right</span><span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.main</span><span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#eee</span><span class="p">;</span>
</span><span class='line'>    <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A Block is not a BFC.</p>

<p> A block formatting context is a box that satisfies at least one of the following:</p>

<ul>
<li>the value of &ldquo;float&rdquo; is not &ldquo;none&rdquo;,</li>
<li>the used value of &ldquo;overflow&rdquo; is not &ldquo;visible&rdquo;,</li>
<li>the value of &ldquo;display&rdquo; is &ldquo;table-cell&rdquo;, &ldquo;table-caption&rdquo;, or &ldquo;inline-block&rdquo;,</li>
<li>the value of &ldquo;position&rdquo; is neither &ldquo;static&rdquo; nor &ldquo;relative&rdquo;.
参考：   <br/>
<a href="http://www.cnblogs.com/pigtail/archive/2013/01/23/2871627.html">关于Block Formatting Context</a>
<a href="http://yuiblog.com/blog/2010/05/19/css-101-block-formatting-contexts/">CSS 101: Block Formatting Contexts</a></li>
</ul>


<p>第四种方法：双飞翼布局
主要用到了float、负margin</p>

<figure class='code'><figcaption><span>double-wing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>          <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;title&gt;</span>A tiny document<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>            <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;double_wing.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;inner&quot;</span><span class="nt">&gt;</span> main <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;aside&quot;</span><span class="nt">&gt;</span> aside <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ad&quot;</span><span class="nt">&gt;</span> ad <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>double-wing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.main</span><span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>        <span class="k">background-color</span><span class="o">:</span><span class="nb">green</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.main</span> <span class="o">&gt;</span> <span class="nc">.inner</span><span class="p">{</span>
</span><span class='line'>        <span class="k">margin-left</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">margin-right</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">background</span><span class="o">:</span> <span class="nb">deeppink</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.aside</span><span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>        <span class="k">margin-left</span><span class="o">:</span> <span class="m">-100</span><span class="o">%</span><span class="p">;</span>  <span class="o">//</span> <span class="err">把</span><span class="n">aside</span><span class="err">拉回开头</span>
</span><span class='line'>        <span class="k">background</span><span class="o">:</span> <span class="nb">pink</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nc">.ad</span><span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>        <span class="k">margin-left</span><span class="o">:</span> <span class="m">-150px</span><span class="p">;</span>   <span class="o">//</span> <span class="err">把</span><span class="n">ad</span><span class="err">往回拉一点</span><span class="o">,</span><span class="err">应该等于</span><span class="n">ad</span><span class="err">这一栏的宽度</span>
</span><span class='line'>        <span class="k">background</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化</h3>

<p>这个比较简单，直接全部float就可以了</p>

<figure class='code'><figcaption><span>floating box</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">box</span><span class="nt">&gt;</span>I&#39;m floating!<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>floating box</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.box</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span><span class="m">200px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span><span class="m">1em</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="nb">blue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>在做综合任务时遇到的问题</h3>

<ul>
<li>css类名该叫什么？</li>
</ul>


<p>这确实是一个让人头疼的问题，大概看了下规范，要求用语义化命名，比如sidebar，而不是left right等仅仅描述这个css在做什么</p>

<ul>
<li>各个div之间如何定位的问题</li>
</ul>


<p>我目前是使用absolute定位</p>

<ul>
<li><code>bottom: 0</code>不起作用？</li>
</ul>


<p>明明设置了一个div的<code>bottom: 0</code>属性了，可是里面的文字就是看着没有贴着下边界，我明明已经把所有元素的padding和margin都置为0了啊！昨晚查到好晚，偶然发现这不是<code>bottom: 0</code>配置不起作用或者padding、margin没有置为0，应该是跟字体有关系，我原来一直用的是英文，昨晚突然灵光一现换成了中文字体，文字立马就贴着下边界了！这个具体原因是什么还得继续深究。</p>

<ul>
<li>inline list 如何实现？</li>
</ul>


<p>正常情况下我们看到的list都是一行一个元素这样的，要想实现所有元素都在一行上的效果，通过做这个学到两种方法：</p>

<blockquote><p>一种方法是用float。所有的li元素设置<code>float: left</code></p>

<p>另一种方法是用<code>inline-block</code>。<code>li</code>元素默认是块级元素，将它的display属性改写为<code>inline-block</code>后，顾名思义，它就是一个inlined block了，可以放在一行上。</p></blockquote>

<ul>
<li>高度塌陷问题（height collapse）</li>
</ul>


<p>这个问题也是会让新手比较困惑的地方。明明我设置了这个div的某些属性（比如背景色），为啥不生效呢？   <br/>
原因我理解是这样：首先，浏览器对于高度为0的元素是不会渲染的，不管你给这个元素设置了多少属性（不行你可以试试）；其次对于使用float、absolute定位方式的元素，浏览器在渲染的时候会把他们从正常流（normal flow）中剔除，就像他们不存在一样，这样就会有一个问题，对于只包含floated或者absoluted的元素，父元素在浏览器看来就是一个空元素，所以它就不会把它渲染出来，它的属性也不会生效，但在人来看，这TMD明明有东西在里面啊，这就会引起困惑。其实这些规则在MDN或者W3的文档里都有说明的，只是太繁琐了，一般人可能都没有精力去翻吧。</p>

<p>前面说道的从正常流里剔除出来的元素是真的不渲染了吗？并不是。按我的理解，这些被剔除的元素会在父元素这个“独立命名空间”被渲染，不会受到其它元素的影响。</p>

<ul>
<li>媒体查询</li>
</ul>


<p>现代浏览器的高端功能，能根据屏幕尺寸的大小来动态地改变css</p>

<figure class='code'><figcaption><span>media query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'> <span class="nc">.icon-github</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">position</span><span class="o">:</span><span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>     <span class="k">right</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>     <span class="k">bottom</span><span class="o">:</span><span class="m">0px</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="nd">:980px</span><span class="o">)</span> <span class="p">{</span>   <span class="o">//</span> <span class="err">当这个条件为真的时候执行下面的</span><span class="nt">css</span><span class="err">，否则就按上面正常的</span><span class="nt">css</span>
</span><span class='line'>    <span class="nc">.icon-github</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面css的意思是在宽度小于980px时不显示icon，当宽度大于980px时才显示</p>

<ul>
<li>relative和absolute的区别</li>
</ul>


<p>一直不明白，刚看了下MDN的文档，加上代码展示，明白了。</p>

<p>relative是在原来的文档流布局好位置的基础上再做一次定位。比如一开始你该float就float，类似于坐座位，等大家都坐好了，你说，OK，我再做一个小小的调整<del>~ 而且！最关键的是我原来的位置也是不允许别人坐的！就那么空着，就是这么霸道</del> 这就是relative啦！</p>

<p>The element&rsquo;s position is fixed relative to a parent element. Only a parent that is itself positioned with relative, fixed or absolute will do. You can make any parent element suitable by specifying position: relative; for it without specifying any shift.  绝对定位是指子元素相对于父元素偏移固定的位移。只有当父元素是relative、fixed或者fixed的时候才能生效。</p>

<p>参考： <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">https://developer.mozilla.org/en-US/docs/Web/CSS/position</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[leetcode challenage]]></title>
    <link href="http://cs50Mu.github.io/blog/2016/02/25/leetcode-challenage/"/>
    <updated>2016-02-25T11:02:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2016/02/25/leetcode-challenage</id>
    <content type="html"><![CDATA[<h3>Nim Game</h3>

<p>这是最简单的题目了，但也想了很久，只想到用递归，看了答案才知道原来一条代码可以解决。。</p>

<p>这个问题的关键是给出一个数字，判断是否一定能赢，而不管过程。</p>

<p>一开始想到递归：</p>

<figure class='code'><figcaption><span>nim-game-iter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">canWinNim</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type n: int</span>
</span><span class='line'><span class="sd">        :rtype: bool</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">canWinNim</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">canWinNim</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">canWinNim</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>提示超时，继续尝试，增加memorization，对于已经计算过的做缓存，下次遇到直接返回。</p>

<figure class='code'><figcaption><span>nim-game-iter-memo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">canWinNim</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">canWinNimIter</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">canWinNimIter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type n: int</span>
</span><span class='line'><span class="sd">        :rtype: bool</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">canWinNim</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">canWinNim</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">canWinNim</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这次不提示超时了，提示超出最大递归深度，尼玛。。</p>

<p>看了别人的答案，眼泪留下来。。</p>

<figure class='code'><figcaption><span>nim-game-superman</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">canWinNim</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">!=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>思考：对于4个的情况，先拿肯定是输，所以能赢的情况必然是不能被4整除的情况（一个数被4除，要么余1 2 3，要么整除）。设想一次游戏，总数除4后余1，那么你先拿一个，然后剩下总数为4的倍数，不管对方拿多少个，我只要确定我下次拿的数目跟对方上次拿的数目之和等于4即可，这样直至拿完，肯定赢。</p>

<p>参考：<a href="https://www.hrwhisper.me/leetcode-nim-game/">https://www.hrwhisper.me/leetcode-nim-game/</a></p>

<h3>Maximum Depth of Binary Tree</h3>

<p>找出一棵二叉树的最大深度。</p>

<p>思路：递归，先得到左边的深度，再得到右边的深度，最后返回最大的一个即可。</p>

<figure class='code'><figcaption><span>maximum-depth-of-binary-tree</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for a binary tree node.</span>
</span><span class='line'><span class="c"># class TreeNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.left = None</span>
</span><span class='line'><span class="c">#         self.right = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">maxDepth</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type root: TreeNode</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">maxDepth</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>            <span class="n">right</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">maxDepth</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Invert Binary Tree</h3>

<p>递归，先把左右分支交换，然后依次递归反转左右分支</p>

<figure class='code'><figcaption><span>invert-binary-tree</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for a binary tree node.</span>
</span><span class='line'><span class="c"># class TreeNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.left = None</span>
</span><span class='line'><span class="c">#         self.right = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">invertTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type root: TreeNode</span>
</span><span class='line'><span class="sd">        :rtype: TreeNode</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">root</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Move Zeroes</h3>

<p>维护两个指针, i用于遍历数组，j初始指向数组开始，当i遇到非零元素时，交换i和j指向的元素，并把i、j各自递增。因此，若一个数组中没有零元素，i和j是始终指向同一个元素的。</p>

<figure class='code'><figcaption><span>move zeroes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">moveZeroes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type nums: List[int]</span>
</span><span class='line'><span class="sd">        :rtype: void Do not return anything, modify nums in-place instead.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Majority Element</h3>

<p>Moore投票算法，维护两个变量candidate和count，candidate记录的是当前可能的候选人，count记录的是当前可能候选人的票数。遍历数组，当遇到的元素等于候选人时就把票数加1；当遇到的元素不等于候选人的时候就把票数减1；当票数为0的时候说明这个候选人没希望了，将候选人置为当前遍历到的元素，然后票数初始化为0。最后得到的candidate就是这个数组中出现次数最多的元素。</p>

<figure class='code'><figcaption><span>majority-element</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">majorityElement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type nums: List[int]</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">candidate</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">candidate</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="n">i</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="n">candidate</span><span class="p">:</span>
</span><span class='line'>                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">candidate</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reverse Linked List</h3>

<p>迭代版本：
基本原理就是新建一个linked list，一边遍历旧的linked list，一边把读出来的元素添加到新建的linked list中，不过注意添加的方法，是从最后一个一个往开始生成的。</p>

<figure class='code'><figcaption><span>reverse linked list iter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for singly-linked list.</span>
</span><span class='line'><span class="c"># class ListNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.next = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reverseList</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type head: ListNode</span>
</span><span class='line'><span class="sd">        :rtype: ListNode</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">dummy</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="c"># dummy is indeed a dummy, lol</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">head</span><span class="p">:</span>
</span><span class='line'>            <span class="nb">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span>  <span class="c"># save the next node for later process</span>
</span><span class='line'>            <span class="n">head</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">.</span><span class="n">next</span>  <span class="c"># 先把head接到已处理过的linked lis的前面</span>
</span><span class='line'>            <span class="n">dummy</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span>   <span class="c"># 再跟原来的dummy连起来</span>
</span><span class='line'>            <span class="n">head</span> <span class="o">=</span> <span class="nb">next</span>  <span class="c">#  指针指向下一个node</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<p>递归版本：
还是递归实现起来简单些</p>

<figure class='code'><figcaption><span>reverse linked list recursion</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for singly-linked list.</span>
</span><span class='line'><span class="c"># class ListNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.next = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reverseList</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type head: ListNode</span>
</span><span class='line'><span class="sd">        :rtype: ListNode</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">reverseListRecursion</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reverseListRecursion</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">new_head</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">head</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">new_head</span>
</span><span class='line'>        <span class="nb">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span>   <span class="c"># save the rest temporarily</span>
</span><span class='line'>        <span class="n">head</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">new_head</span>   <span class="c"># next point to new_head</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">reverseListRecursion</span><span class="p">(</span><span class="nb">next</span><span class="p">,</span> <span class="n">head</span><span class="p">)</span>  <span class="c"># doing this recursively</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Roman to Integer</h3>

<p>自己想出来的，不容易啊。。</p>

<p>首先把罗马数字与阿拉伯数字的映射关系准备好，然后遍历罗马数字的字符，同时维护一个prev变量保存前一个遍历过的字符，当发现当前字符比前一个字符代表的阿拉伯数字小时，使用特殊的累加策略，否则就是简单的把当前字符对应的阿拉伯数字累加到总和total中。</p>

<figure class='code'><figcaption><span>Roman to integer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">romanToInt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type s: str</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;I&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;V&#39;</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;X&#39;</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span> <span class="s">&#39;L&#39;</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span> <span class="s">&#39;D&#39;</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span> <span class="s">&#39;M&#39;</span><span class="p">:</span><span class="mi">1000</span><span class="p">}</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">prev</span> <span class="ow">and</span> <span class="nb">hash</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">hash</span><span class="p">[</span><span class="n">prev</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">total</span> <span class="o">+=</span> <span class="nb">hash</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">hash</span><span class="p">[</span><span class="n">prev</span><span class="p">]</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">total</span> <span class="o">+=</span> <span class="nb">hash</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">prev</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Odd Even Linked List</h3>

<p>思路其实比较简单，就是遍历链表，奇数序元素放到奇数链表中，偶数序元素放到偶数链表中。但是，要维护的指针比较多，不注意就会搞混。。新生成的奇数链表和偶数链表都需要指针来操作。
而且，在从头生成一个指针时，需要先初始化一个DummyNode，然后再把元素一个一个接在后面，元素添加完成后，<code>DummyNode.next</code>就是这条刚生成的链表的head了。</p>

<figure class='code'><figcaption><span>Odd Even Linked List</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for singly-linked list.</span>
</span><span class='line'><span class="c"># class ListNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.next = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">oddEvenList</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type head: ListNode</span>
</span><span class='line'><span class="sd">        :rtype: ListNode</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">oddHead</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">oddCurrent</span> <span class="o">=</span> <span class="n">oddHead</span>   <span class="c"># pointer</span>
</span><span class='line'>        <span class="n">evenHead</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">evenCurrent</span> <span class="o">=</span> <span class="n">evenHead</span>  <span class="c"># pointer</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">head</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">count</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">oddCurrent</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>                <span class="n">oddCurrent</span> <span class="o">=</span> <span class="n">oddCurrent</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">evenCurrent</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">head</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>                <span class="n">evenCurrent</span> <span class="o">=</span> <span class="n">evenCurrent</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">oddCurrent</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">evenHead</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">oddHead</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Remove Duplicates from Sorted List</h3>

<p>维护两个指针，一个prev，一个current，分别指向遍历链表的前一个元素和当前元素，当 前一个元素跟当前元素相同时，舍弃掉当前元素。
否则，就把prev和current各自向下移动一位元素。</p>

<figure class='code'><figcaption><span>Remove Duplicates from Sorted List</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for singly-linked list.</span>
</span><span class='line'><span class="c"># class ListNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.next = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">deleteDuplicates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type head: ListNode</span>
</span><span class='line'><span class="sd">        :rtype: ListNode</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="n">head</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">current</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">prev</span> <span class="ow">and</span> <span class="n">prev</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">current</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
</span><span class='line'>                <span class="n">prev</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>                <span class="n">current</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">prev</span> <span class="o">=</span> <span class="n">current</span>
</span><span class='line'>                <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">head</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Happy Number</h3>

<p>用一个集合来放已经算过的数，如果有数重复出现，说明开始进入循环了。</p>

<figure class='code'><figcaption><span>Happy Number</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">isHappy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type n: int</span>
</span><span class='line'><span class="sd">        :rtype: bool</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">n</span> <span class="o">!=</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">n</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">number</span><span class="p">:</span>
</span><span class='line'>            <span class="n">number</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">tmp</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">10</span>
</span><span class='line'>                <span class="nb">sum</span> <span class="o">+=</span> <span class="n">tmp</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'>                <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="nb">sum</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Merge Two Sorted Lists</h3>

<p>比较两个链表当前的元素大小，把符合条件的元素加到新list中，同时把符合条件的元素所在的链表的指针往下移动一个元素，另一个链表的指针不动，
如此直到至少一个链表遍历完成，最后把剩下的链表未遍历完的元素全部追加到新链表即可。</p>

<figure class='code'><figcaption><span>Merge Two Sorted Lists</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for singly-linked list.</span>
</span><span class='line'><span class="c"># class ListNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.next = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mergeTwoLists</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type l1: ListNode</span>
</span><span class='line'><span class="sd">        :type l2: ListNode</span>
</span><span class='line'><span class="sd">        :rtype: ListNode</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">dummy</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="n">dummy</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">l1</span> <span class="ow">and</span> <span class="n">l2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">l1</span><span class="o">.</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="n">l2</span><span class="o">.</span><span class="n">val</span><span class="p">:</span>
</span><span class='line'>                <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">l2</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>                <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">l1</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>                <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">l1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">l1</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">l2</span><span class="p">:</span>
</span><span class='line'>            <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">l2</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Intersection of Two Arrays</h3>

<p>先对两个数组排序，然后对两个数组各自维护一个指针，同时遍历两个数组，当在一个数组中当前指针对应的值小于另一个数组中当前指针对应的值时，把指针往前移动。
当两个指针对应的元素相等时，说明找到一个interaction了。</p>

<figure class='code'><figcaption><span>Intersection of Two Arrays</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">intersection</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type nums1: List[int]</span>
</span><span class='line'><span class="sd">        :type nums2: List[int]</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">nums1</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">nums2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">sorted_nums1</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">nums1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sorted_nums2</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">nums2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">last</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums2</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">sorted_nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">sorted_nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">sorted_nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">sorted_nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">sorted_nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">sorted_nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">sorted_nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">last</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">ans</span> <span class="o">=</span> <span class="n">sorted_nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                    <span class="n">last</span> <span class="o">=</span> <span class="n">ans</span>
</span><span class='line'>                    <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Top K Frequent Elements</h3>

<p>使用桶排序  比较有意思，先遍历一遍找到每个元素的频率存在字典中，然后初始化一个数组，以每个元素的频率为数组的下标（index）把对应的元素存入这个数组，
最后把这个数组从后往前遍历，得到的结果就是出现频率从高到低的元素</p>

<h3>Binary Tree Preorder Traversal</h3>

<figure class='code'><figcaption><span>Binary Tree Preorder Traversal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for a binary tree node.</span>
</span><span class='line'><span class="c"># class TreeNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.left = None</span>
</span><span class='line'><span class="c">#         self.right = None</span>
</span><span class='line'>
</span><span class='line'><span class="c"># recursive version</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">preorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type root: TreeNode</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">recursive_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">recursive_traversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">root</span><span class="p">:</span>
</span><span class='line'>            <span class="nb">list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">recursive_traversal</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">recursive_traversal</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># another recursive version</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">preorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type root: TreeNode</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">preorderTraversal</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">preorderTraversal</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># iteritive version</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">preorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">root</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">res</span>
</span><span class='line'>        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
</span><span class='line'>            <span class="n">root</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kth Smallest Element in a BST</h3>

<p>对BST的in-order traversal就是按顺序的遍历，所以执行一个in-order traversal，同时记录遍历到第几个就行了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for a binary tree node.</span>
</span><span class='line'><span class="c"># class TreeNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.left = None</span>
</span><span class='line'><span class="c">#         self.right = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">kthSmallest</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type root: TreeNode</span>
</span><span class='line'><span class="sd">        :type k: int</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">root</span>
</span><span class='line'>        <span class="n">stack</span><span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="c"># traverse to the left-most element, aka, the smallest element</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="c"># in-order traversal using stack</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">stack</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>            <span class="n">element</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">element</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
</span><span class='line'>                <span class="n">temp</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>                <span class="k">while</span> <span class="n">temp</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">element</span><span class="o">.</span><span class="n">val</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Two Sum II &ndash; Input array is sorted</h3>

<p>维护两个指针，从两边向中间搜索</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">numbers</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type numbers: List[int]</span>
</span><span class='line'><span class="sd">        :type target: int</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">low</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">high</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
</span><span class='line'>            <span class="n">s</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">[</span><span class="n">low</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">high</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">target</span> <span class="o">&gt;</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>                <span class="n">low</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>                <span class="n">high</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Linked List Random Node</h3>

<p>蓄水池抽样（Reservoir Sampling）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for singly-linked list.</span>
</span><span class='line'><span class="c"># class ListNode(object):</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.next = None</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        @param head The linked list&#39;s head.</span>
</span><span class='line'><span class="sd">        Note that the head is guaranteed to be not null, so it contains at least one node.</span>
</span><span class='line'><span class="sd">        :type head: ListNode</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">head</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getRandom</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Returns a random node&#39;s value.</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">head</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">cnt</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">res</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>
</span><span class='line'>            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>            <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># Your Solution object will be instantiated and called as such:</span>
</span><span class='line'><span class="c"># obj = Solution(head)</span>
</span><span class='line'><span class="c"># param_1 = obj.getRandom()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Shuffle an Array</h3>

<p>对于每个i，从0-i随机选择一个数r，交换</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        </span>
</span><span class='line'><span class="sd">        :type nums: List[int]</span>
</span><span class='line'><span class="sd">        :type size: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">nums</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[:]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">original</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[:]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reset</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Resets the array to its original configuration and return it.</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">original</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">shuffle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Returns a random shuffling of the array.</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">nums</span><span class="p">)):</span>
</span><span class='line'>            <span class="n">rand</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">nums</span><span class="p">[</span><span class="n">rand</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">nums</span><span class="p">[</span><span class="n">rand</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">nums</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># Your Solution object will be instantiated and called as such:</span>
</span><span class='line'><span class="c"># obj = Solution(nums)</span>
</span><span class='line'><span class="c"># param_1 = obj.reset()</span>
</span><span class='line'><span class="c"># param_2 = obj.shuffle()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Count Numbers with Unique Digits</h3>

<p>排列组合</p>

<p>设i为长度为i的各个位置上数字互不相同的数。</p>

<pre><code>i==1 : 10（0~9共10个数，均不重复）
i==2: 9 * 9 （第一个位置上除0外有9种选择，第2个位置上除第一个已经选择的数，还包括数字0，也有9种选择）
i ==3: 9* 9 * 8 （前面两个位置同i==2，第三个位置除前两个位置已经选择的数还有8个数可以用）
……
i== n: 9 * 9 * 8 *…… (9-i+2)
</code></pre>

<p>需要注意的是，9- i + 2 >0 即 i &lt; 11，也就是i最大为10，正好把每个数都用了一遍。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">countNumbersWithUniqueDigits</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type n: int</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">9</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>                <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*=</span> <span class="n">j</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kth Smallest Element in a Sorted Matrix</h3>

<p>利用优先队列 heapq</p>

<p>先把第一行加入heapq，然后经过k次循环即可得到第k大的元素，在每次循环中，pop出最小的元素，然后push进刚pop出的元素下方的元素（即它同一列上相邻的元素）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">heapq</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">kthSmallest</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type matrix: List[List[int]]</span>
</span><span class='line'><span class="sd">        :type k: int</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">row_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
</span><span class='line'>        <span class="n">col_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">pq</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">col_count</span><span class="p">):</span>
</span><span class='line'>            <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">pq</span><span class="p">,</span> <span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
</span><span class='line'>            <span class="n">val</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">pq</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">next</span> <span class="o">=</span> <span class="n">row</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">next</span> <span class="o">&lt;</span> <span class="n">row_count</span><span class="p">:</span>
</span><span class='line'>                <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">pq</span><span class="p">,</span> <span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="nb">next</span><span class="p">][</span><span class="n">col</span><span class="p">],</span> <span class="nb">next</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Product of Array Except Self</h3>

<p>除自己之外的其它数的乘积可以看作由两部分组成：该数左边部分的数的积和改数右边部分的数的积。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">productExceptSelf</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type nums: List[int]</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">nums_length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># calcute left part</span>
</span><span class='line'>        <span class="n">pre_product</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nums_length</span><span class="p">):</span>
</span><span class='line'>            <span class="n">pre_product</span> <span class="o">*=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">output</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pre_product</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># calcute right part and the final result</span>
</span><span class='line'>        <span class="n">after_product</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nums_length</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">after_product</span> <span class="o">*=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*=</span> <span class="n">after_product</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Binary Tree Paths</h3>

<p>DFS 深度优先搜索，在traverse过程中记住经过的node，当到达叶子节点时，把路径打印出来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Definition for a binary tree node.</span>
</span><span class='line'><span class="c"># class TreeNode:</span>
</span><span class='line'><span class="c">#     def __init__(self, x):</span>
</span><span class='line'><span class="c">#         self.val = x</span>
</span><span class='line'><span class="c">#         self.left = None</span>
</span><span class='line'><span class="c">#         self.right = None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @param {TreeNode} root</span>
</span><span class='line'>    <span class="c"># @return {string[]}</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">binaryTreePaths</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">:</span>
</span><span class='line'>                <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">path</span> <span class="o">+</span> <span class="s">&#39;-&gt;&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">val</span><span class="p">))</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">:</span>
</span><span class='line'>                <span class="n">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">path</span> <span class="o">+</span> <span class="s">&#39;-&gt;&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="o">.</span><span class="n">val</span><span class="p">))</span>
</span><span class='line'>        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">val</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[continue blogging on Mac OSX using octoress]]></title>
    <link href="http://cs50Mu.github.io/blog/2015/07/12/continue-blogging-on-macosx-using-octoress/"/>
    <updated>2015-07-12T16:31:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2015/07/12/continue-blogging-on-macosx-using-octoress</id>
    <content type="html"><![CDATA[<p>换了Mac，终于可以继续用Octopress写blog了，但首先得把原来的blog从git上同步过来，纪录下在此过程中遇到的坑。</p>

<ol>
<li><p>clone source分支。</p>

<pre><code> git clone -b source git@github.com:cs50Mu/cs50mu.github.com.git octopress
</code></pre></li>
<li><p>clone master分支到<code>octopress/_deploy</code>文件夹中</p>

<pre><code> git clone git@github.com:cs50Mu/cs50mu.github.com.git _deploy 
</code></pre></li>
<li>重新安装Octopress环境，这里出现了一堆坑。。。

<ul>
<li>ruby gems官方源被墙，这个当时在Archlinux上安装时已经遇到，解决办法不再重复</li>
<li><p>当执行<code>brew install ruby-build</code>提示找不到GCC。这个是因为mac上的gcc用的是苹果自己的编译器llvm，不是GNU版本的gcc，而octopress使用的特定版本的ruby（1.9.3）需要用GNU版的编译器来编译，按照homebrew的提示安装GCC即可</p>

<pre><code>  $ brew update
  $ brew tap homebrew/dupes
  $ brew install autoconf automake apple-gcc42
</code></pre></li>
<li><p>使用rbenv安装<code>Ruby 1.9.3</code>时，安装的ruby版本不能生效。表现的现象是：当执行<code>ruby --version</code>时仍然给出的时mac系统自带的ruby版本。解决办法就是在<code>.bash_profile</code>中添加</p>

<pre><code>  # Initialize rbenv
  if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi
</code></pre>

<p>然后<strong>注意</strong>在zsh shell中需要在<code>.zshrc</code>中添加<code>source ~/.bash_profile</code>，因为zsh shell是不读<code>.bash_profile</code>文件的（或者是因为我安装了oh-my-zsh），还有要记住添加的这一行一定要在<code>.zshrc</code>文件中路径声明的后边！！否则，加这一句也不会起作用。切记，一开始在这个上面被坑了很久。</p></li>
<li>执行<code>$ rake new_post["something to say"]</code>，zsh会报错：<code>zsh: no matches found: new_post[something to say]</code>，原因是<code>[ ]</code>在zsh中是文件名通配符，解决办法：
在<code>.zshrc</code>中加入<code>alias rake="noglob rake"</code></li>
</ul>
</li>
</ol>


<h3>参考</h3>

<ul>
<li><a href="http://blog.zerosharp.com/installing-ruby-with-homebrew-and-rbenv-on-mac-os-x-mountain-lion/">Installing Ruby With Homebrew and Rbenv on Mac OS X Mountain Lion</a></li>
<li><a href="https://ruby-china.org/wiki/rbenv-guide">rbenv-guide</a></li>
<li><a href="http://octopress.org/docs/setup/">Octopress Setup</a></li>
<li><a href="https://github.com/imathis/octopress/issues/117">not compatible with zsh</a></li>
<li><a href="http://liuyix.org/blog/2013/mac-install-octopress/">Mac上安装octopress</a></li>
<li><a href="http://boboshone.com/blog/2013/06/05/write-octopress-blog-on-multiple-machines/">在多台电脑上写Octopress博客</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test from new mac]]></title>
    <link href="http://cs50Mu.github.io/blog/2015/07/12/test-from-new-mac/"/>
    <updated>2015-07-12T13:04:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2015/07/12/test-from-new-mac</id>
    <content type="html"><![CDATA[<p><strong>if you see this page, then the migration is ok!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python的logging模块总结]]></title>
    <link href="http://cs50Mu.github.io/blog/2015/02/02/logging-module-of-python/"/>
    <updated>2015-02-02T10:58:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2015/02/02/logging-module-of-python</id>
    <content type="html"><![CDATA[<p>里面主要有这么几个类：logger handler formatter，其中logger类用于实例化logger对象，handler类负责指定log信息的发送目的地，比如你可能希望log信息发送到终端、文件甚至远程主机上，还支持日志轮转，比如<code>RotatingFileHandler</code>支持按文件轮转，<code>TimedRotatingFileHandler</code>支持按时间轮转，formatter类，顾名思义，负责log信息的格式的设定。</p>

<p>使用logging模块的基本流程为：先通过<code>logging.getlogger('loggername')</code>获取一个logger对象，然后根据需求为这个logger对象添加相应的handler和formatter，这样就算基本配置完了，这样就可以在你的程序里使用<code>logging.debug('debug info')</code>等类似语句来输出log信息了。</p>

<p>在实际开发中一般是通过文件来进行配置的，配置信息全写在一个配置文件中，然后在脚本里读取配置信息，一个简单的示例：</p>

<pre><code>import logging
import logging.config

logging.config.fileConfig('logging.conf')

# create logger
logger = logging.getLogger('simpleLogger')

# use it
logger.debug('debug info')
logger.info('info message')
logger.warn('warning info')
logger.critical(''critical info')
</code></pre>

<p>配置文件如下，需要遵守一定的格式，具体要求见参考链接</p>

<pre><code>[loggers]
keys=root, simpleLogger

[handlers]
keys=consoleHandler

[formatters]
keys=simpleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler
...
...
[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="https://docs.python.org/2/howto/logging.html">Logging HOWTO</a></li>
<li><a href="https://docs.python.org/2/library/logging.config.html#logging-config-api">Logging configuration</a>  这里详细讲了配置文件到底该怎么写</li>
<li><a href="http://kenby.iteye.com/blog/1162698">使用python的logging模块</a></li>
<li><a href="http://www.cnblogs.com/captain_jack/archive/2011/01/21/1941453.html">Python模块学习——logging</a></li>
<li><a href="http://blog.csdn.net/ithomer/article/details/16985379">Python 学习入门（14）—— logging</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[trivial problems]]></title>
    <link href="http://cs50Mu.github.io/blog/2015/01/20/trivial-problems/"/>
    <updated>2015-01-20T18:40:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2015/01/20/trivial-problems</id>
    <content type="html"><![CDATA[<p>今天很高兴，因为解决了几个困扰很久的问题。</p>

<h2>OpenVPN</h2>

<p>为便于办公，公司提供了VPN，不过只提供了OpenVPN的连接方案，之前在arch上一直是用pptp连接的，大概看了看wiki上OpenVPN的文档，一大堆。。。头大。</p>

<p>不过，今天仔细一看，原来并不麻烦，只要把管理员提供的证书文件等放到相应文件夹上就搞定了！</p>

<blockquote><p>将这几个文件放到/etc/openvpn目录下   xxx.ovpn ca.crt  xxx.crt  xxx.key  其中xxx.pvpn是配置文件
然后就可以启动了！ sudo openvpn /etc/openvpn/xxx.ovpn   会提示输入密码，输入管理员提供的密码即可</p></blockquote>

<h2>urxvt SSH远程登陆的问题</h2>

<p>之前在Arch上用urxvt一直比较happy，不过公司里开发都是SSH远程登陆到linux主机上进行的，那么问题来了，明明在本地显示很正常的vim，SSH到了公司上的Linux主机上，显示就成了一堆渣。。明明vim的配置文件都是一样的啊。。  后来慢慢发现不是vim的问题，是终端的问题！！因为我换用lilyterm后就显示正常了！！然后，终于在今天让我google到解决方案了～</p>

<blockquote><ol>
<li><p>Run the following command on the external host to make a terminfo directory
under the logged in user&rsquo;s home folder.</p>

<pre><code>mkdir -p ~/.terminfo/r/
</code></pre></li>
<li><p>Copy the appropriate terminal profile from your local machine to the newly
created folder on the remote host.</p>

<pre><code>scp /usr/share/terminfo/r/rxvt-unicode-256color user@helloworld.com:.terminfo/r/
</code></pre></li>
<li><p>Restart the SSH connection. It should work now.</p></li>
</ol>
</blockquote>

<h2>vim中使用tab自动补全</h2>

<p>对于程序员来说，这世界上如果没有自动补全的话，简直不能想象。。之前习惯了使用TAB自动补全，现在在公司的远程Linux上却怎么也搞不出TAB自动补全的效果。。配置文件和插件都装一样的也不行。。。真是见鬼了。。 今天发现应该是之前装了supertab，然后不知道怎么又自己给删了，但是效果还在。。在远程Linux上装了supertab后，嗯，就是这个感觉～～</p>

<p>本事件的教训就是，无论做什么一定要做好记录。。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.cs.helsinki.fi/u/andrews/misc/full_urxvt_support_on_ssh_terminals.txt" title="">FULL URXVT TERMINAL SUPPORT FOR REMOTE (SSH) CONNECTIONS</a></li>
<li><a href="" title="https://stavrovski.net/blog/installing-and-setting-up-openvpn-in-archlinux">Installing and setting up OpenVPN in ArchLinux</a></li>
<li><a href="" title="https://wiki.archlinux.org/index.php/Airvpn">Configuring OpenVPN to connect as a client to an AirVPN server</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[problems about python and mysql]]></title>
    <link href="http://cs50Mu.github.io/blog/2015/01/19/problems-about-python-and-mysql/"/>
    <updated>2015-01-19T15:47:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2015/01/19/problems-about-python-and-mysql</id>
    <content type="html"><![CDATA[<p>记录一下这几天项目上遇到的问题</p>

<h2>Python 2.7的编码问题</h2>

<p>Python 2.x内部处理编码默认还是ascii，在处理utf8编码的数据时会报UnicodeEncodeError: ‘ascii’ codec can’t encode异常错误。这个问题之前就遇到过。</p>

<pre><code>import sys
print sys.getdefaultencoding()  # 获取系统默认编码
reload(sys)
sys.setdefaultencoding('utf-8')  # 重新设置为utf-8
</code></pre>

<h2>MySQL 乱码解决</h2>

<p>创建数据库  <code>CREATE DATABASE test CHARACTER SET utf8 COLLATE utf8_general_ci;</code>   <br/>
创建表    <code>CREATE TABLE test_table (........) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></p>

<p>Python连接数据库时 <code>conn = MySQLdb.connect(host="localhost", user="root", passwd="root", db="db",  charset="utf8")</code></p>

<h2>git</h2>

<ul>
<li>基于某个分支新建分支
  git branch muchunyu origin/dev  # 假设dev分支不在本地，存在于远程服务器
  git checkout muchunyu  # 切换到这个分支
或者可以直接：   <br/>
  git checkout -b muchunyu origin/dev</li>
<li>只clone某个分支到本地
  git clone -b <branch> &lt;remote_repo></li>
</ul>


<h2>常用数据库操作</h2>

<pre><code>create database xxx; #创建数据库
use xxx;   # 转到某个数据库
create table xxx (....); # 创建表
show tables;  # 显示数据库中的表
describe xxxx; # 显示表结构
drop xxx  # 可以是表名或者数据库名 表的结构 属性 索引都会被删掉
truncate xxx  # 只用于表且只会清空表中数据，不会删除表结构等
</code></pre>

<h2>参考</h2>

<p><a href="http://www.cnblogs.com/mengdd/p/3447464.html">在GitHub上管理项目</a>
<a href="http://www.cnblogs.com/fantiantian/p/3468454.html">Mysql乱码问题解决历程</a>
<a href="http://www.2cto.com/database/201108/101151.html">Mysql中文乱码问题完美解决方案</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Vim 读书笔记]]></title>
    <link href="http://cs50Mu.github.io/blog/2015/01/12/note-from-practical-vim/"/>
    <updated>2015-01-12T11:31:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2015/01/12/note-from-practical-vim</id>
    <content type="html"><![CDATA[<ul>
<li>The Vim Way

<ol>
<li> <code>.</code>命令可以重复做上一次的改变(repeat last change)。这里关键是要理解这个改变的意思，就我现在的理解，这个改变是不包括光标位置的移动的，只是指对文本内容的改变，比如删除 增加等等。理解这一点很重要。</li>
<li> <code>;</code> 分号，配合f使用，移动到下一个匹配的地方，反方向移动为<code>,</code></li>
<li> <code>*</code> 移动到下一个与当前光标处文本匹配的地方，并高亮显示所有匹配文本</li>
</ol>
</li>
<li>Normal Mode

<ol>
<li> <code>aw</code>  &ldquo;a word&rdquo; <code>daw</code>可删除整个单词，不管光标在哪里</li>
<li> <code>&lt;C - a&gt;</code>和<code>&lt;C - x&gt;</code> commands perform addition and subtraction on numbers.</li>
<li> <code>g~</code> swap case 改变大小写  <br/>
<code>gu</code> make lowercase  <br/>
<code>gU</code> make uppercase</li>
<li> <code>=</code> autoindent  自动缩进</li>
</ol>
</li>
<li>Insert Mode.   Most of Vim&rsquo;s commands are triggered from other modes, but some functionality is within easy reach from Insert mode.

<ol>
<li> <code>&lt;C - h&gt;</code> Delete back one character</li>
<li> <code>&lt;C - w&gt;</code> Delete back one word</li>
<li> <code>&lt;C - u&gt;</code> Delete back to start of line</li>
<li> <code>&lt;C - O&gt;</code>  execute one command, return to Insert mode. 所谓的Insert Normal Mode，在insert模式下进入此模式后可以执行一次normal模式下才能执行的命令后立即返回insert模式，可以配合zz（使光标处在屏幕中间）使用。如在编辑过程中光标处在最上端或者最下端了，此时想要看一看上下文，可以使用<code>&lt;C - O&gt;zz</code>，然后又立即可以继续编辑。</li>
<li> <code>&lt;C - r&gt;{register}</code> Paste from a Register Without Leaving Insert Mode. For example, <code>&lt;C - r&gt;0</code>  不适合大段文本，因为这种情况下文本是一个字符一个字符粘贴过来的。</li>
<li> <code>&lt;C - r&gt;=</code>  expression register. 可以用于在寄存器中evaluate表达式，然后把结果返回到当前光标处。</li>
<li> <code>&lt;C - v&gt;{code}</code> Insert unusual characters by character code. For example, <code>&lt;C -v&gt;065</code>   <br/>
<code>&lt;C - v&gt;{123}</code> Insert character by decimal code  <br/>
<code>&lt;C - v&gt;u{1234}</code> Insert character by hexadecimal code</li>
</ol>
</li>
<li>Visual Mode

<ol>
<li> <code>v</code> &ndash;  character-wise Visual mode  <br/>
<code>V</code> &ndash; line-wise Visual mode  <br/>
<code>&lt;C - v&gt;</code> &ndash; block-wise Visual mode  <br/>
<code>gv</code> &ndash; reselect the last visual selection  <br/>
<code>o</code> &ndash; go to the other end of highlighted text</li>
</ol>
</li>
<li>Command-Line Mode

<ol>
<li> <code>.</code> 代表当前行 <code>%</code> 代表所有行</li>
<li> <code>:/&lt;html&gt;/,/&lt;\/html&gt;/p</code>  Specify a range of lines by patterns</li>
<li> <code>:/&lt;html&gt;/+1,/&lt;\/html&gt;/-1p</code>Modify an Address using an offset</li>
<li> <code>[range]copy {address}</code>  Duplicate lines  也可以用<code>:t</code>  移动行用<code>:m</code></li>
<li> <code>@:</code>  Repeating the last Ex command</li>
<li> <code>:%normal A;</code>  Run Normal Mode Commands across a range  在命令行模式下运行normal模式下的命令</li>
<li> <code>&lt;C - d&gt;</code>  ask Vim to reveal a list of possible completions  自动补全</li>
<li> <code>&lt;C -r&gt;&lt;C - w&gt;</code>  Insert the current word at the command prompt</li>
<li> <code>:%s//&lt;C-r&gt;&lt;C-w&gt;/g</code>  Leaving the search field of the substitute command blank instructs Vim to reuse the most recent search pattern  重用上次的search pattern</li>
<li> words与WORDS的区别:As users, we can think of them in simpler terms: WORDS are bigger than words.  WORDS用W B E gE来操作，且移动的跨度比words大</li>
<li> <code>q:</code> 进入Command-Line Window</li>
<li> <code>:shell</code>   The <code>:!{cmd}</code> syntax is great for firing one-off commands, but what if we want to run several commands in the shell? In that case, we can use this command to start an interactive shell session.  可以用exit退出，回到vim</li>
<li> <code>&lt;C - z&gt;</code>  Putting Vim in the background  用<code>fg</code>返回</li>
<li> <code>:read !{cmd}</code> 把cmd运行结果读入当前buffer     <code>:write !{cmd}</code>  Use the contents of the buffer as standard input for the specified {cmd}.</li>
<li> Filtering the contents of a buffer through an external command   <br/>
The <code>:!{cmd}</code>command takes on a different meaning when it&rsquo;s given a range. The lines specified by <code>[range]</code> are passed as standard input for the <code>{cmd}</code>, and then the output from <code>{cmd}</code> overwrites the original contents of <code>[range]</code>.</li>
</ol>
</li>
<li>Manage Multiple Files

<ol>
<li> <code>:args</code>  argument list, represents the list of files that was passed as an argument when we ran the vim command.</li>
<li> <code>&lt;C - w&gt;s</code> divide the window horizontally   <code>&lt;C - w&gt;v</code> divide the window vertically. Each time we use these commands, the two resulting split windows will contain the same buffer as the original window that was divided.  <br/>
或者<code>:sp {filename}</code> 水平分割打开文件   <code>:vsp {filename}</code> 垂直分割打开文件   <br/>
<code>&lt;C - w&gt;w</code> cycle between open windows   <br/>
<code>:cl[ose]</code> or <code>&lt;C - w&gt;c</code>  close the active window   <br/>
<code>:on[ly]</code> or <code>&lt;C - w&gt;o</code>  keep only the active window, closing all others</li>
<li> <code>:tabe[dit] {filename}</code>  open {filename} in a new tab   <br/>
<code>:tabc[lose]</code> close the current tab page and all of its windows.  <br/>
<code>:tabo[nly]</code>   keep the active tab page, closing all othersa     <br/>
<code>tabn[ext]</code>  or gt  Switch to the next tab page</li>
</ol>
</li>
<li>Open Files and Save Them to Disk

<ol>
<li> <code>:edit %:h&lt;Tab&gt;</code>  Open a File Relative to the active file directory.  The <code>%</code> symbol is a shorthand for the filepath of the active buffer. The <code>:h</code> modifier removes the filename while preserving the rest of the path</li>
<li> <code>:e[dit] .</code> or <code>:E[xplore]</code> Open file explorer for the current working directory or the directory of the active buffer</li>
</ol>
</li>
<li>Navigate Inside Files with Motions

<ol>
<li> Real lines and Display lines     <br/>
<code>gj</code> <code>gk</code>  go down/up one display line.    <br/>
<code>g0</code> to first character of the display line    <br/>
也就是所有在display line上的操作都是以g开头的</li>
<li> <code>f{char}</code> <code>;</code> <code>,</code>  行内查找字符  重复  反向     <br/>
小技巧： When using the character search commands, it&rsquo;s better to choose target characters with  a low frequency of occurrences. 尽量选出现频率低的</li>
<li> <code>vi'</code> <code>va'</code>  区别是：第一个是inside，第二个是all. <code>cit</code> stands for &ldquo;change inside the tag&rdquo;</li>
<li> <code>iw</code>与<code>aw</code>的区别  <code>iw</code> stands for &ldquo;current word&rdquo;, while <code>aw</code> stands for &ldquo;current word plus one space&rdquo;. 因此，<code>aw</code>对象适合用于删除（d）操作，而<code>iw</code>适合用于修改（c）操作。</li>
<li> <code>m{a-zA-Z}</code> marks the current cursor location with the designated letter. Lowercase marks are local to each individual buffer, whereal uppercase marks are globally accessible. <code>'{mark}</code> moves to the line where a mark was set, positioning the cursor on the first non-whitespace character.<code>`{mark}</code>moves the cursor to the exact position where a mark was set.    <br/>
The <code>mm</code> and <code>'m</code> commands makes a handy pair. Respectively, they set the mark m and jump to it.</li>
<li> Surround.vim 插件，非常酷～ 一开始装了不起作用，后来发现是跟.vimrc配置中关于fcitx的设置有冲突，只能暂时不用fcitx的配置了。</li>
</ol>
</li>
<li>Navigate Between Files with Jumps

<ol>
<li> motions and jumps.  motions move around within a file, whereas jumps can move between files. jumps可以在文件之间跳转～</li>
<li> <code>&lt;C - i&gt;</code>  jump back   <br/>
<code>&lt;C - o&gt;</code> jump forth</li>
<li> <code>(/)</code> <code>{/}</code>  jump to start of previous/next sentence/paragraph</li>
<li> <code>H/M/L</code>  jump to top/middle/bottom of screen</li>
</ol>
</li>
<li>Copy and Paste

<ol>
<li> vim中使用<code>dd</code>或<code>yy</code>命令时，被复制或剪切的内容默认是放在未命名寄存器中的（unnamed register），若要指定特定的寄存器，需要<code>"{register}</code>，比如要复制内容到a寄存器，需要<code>"ayiw</code>，然后粘贴内容需要<code>"ap</code></li>
<li> 当我们使用复制命令时（<code>y{motion}</code>），特定的文本不仅被复制到未命名寄存器中，它同时也被复制到了复制寄存器（yank register），这个寄存器可以用<code>"0</code>来引用。</li>
<li> 黑洞寄存器（The Black Hole Register）。 在删除一些内容时，如果确定以后不会再使用它，那么为防止它污染当前的unamed register，可以用<code>"_</code>将它放入黑洞寄存器。 If we run the command <code>"_d{motion}</code>, then Vim deletes the specified text without saving a copy of it.</li>
<li> 系统寄存器和选择寄存器。 用于Vim外的程序与Vim共享内存。<code>"+</code>可以访问到系统中复制、剪切到剪切板的内容，而<code>"*</code>是专门针对Linux平台上的X11系统的，在X11系统中，内容只要被选中即被放在了系统剪切板中了，此时在Vim中可用<code>"*</code>寄存器访问。</li>
<li> 避免系统剪切板的内容剪切到Vim中出现太多缩进的情况。  这个问题的出现是由于autoindent特性的开启，如果此时需要在Insert模式下插入系统剪切板的内容，一个方法是先开启paste模式（<code>:set paste</code>），然后这时用鼠标中键粘贴就不会有问题了，不过记得用完要关掉paste模式（<code>:set paste!</code>）。更简单的方法是：直接在命令行模式下使用<code>"+p</code>或者<code>"*p</code>，不用管什么模式了。</li>
</ol>
</li>
<li>Macros

<ol>
<li> <code>q{register}</code> 开始录制，再次按q来停止录制，可以通过<code>:reg {register}</code>来查看宏的内容</li>
<li> 通过<code>@{register}</code>来执行宏，<code>@@</code>来执行最近调用过的宏</li>
<li> Series or Parallel 顺序还是并行。以并行方式执行宏，遇到错误时不会停止。</li>
<li> 录制宏的原则：确保每条命令都可以被<strong>重复</strong>执行</li>
<li> 如何以并行方式执行宏？先在visual模式下选中需要执行宏的所有行，然后在命令行<code>:normal @a</code></li>
<li> 在宏的末尾追加命令。假设之前录制的宏为a，则使用<code>qA</code>可以在原来的宏末尾继续添加命令而不会覆盖之前的宏。</li>
</ol>
</li>
<li>Matching Patterns and Literals

<ol>
<li> 按正则表达式查找时，使用<code>\v</code>模式开关，这会开启very magic搜索模式 eg. <code>/\v#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})</code></li>
<li> 按原义查找文本时，使用<code>\V</code>原义开关 eg. <code>/\Va.k.a</code></li>
<li> 界定单词的边界。用<code>&lt; &gt;</code>来标识单词的边界  eg. <code>/\v&lt;the&gt;</code></li>
<li> 界定匹配的边界。用<code>\zs</code>标识匹配的开始，<code>\ze</code>标识匹配的结束，比较有趣，查找还按原来的规则查找，只是显示匹配的时候只把感兴趣的部分显示出来。 eg. <code>/\v"\zs[^"]+\ze"</code> 只显示引号内的内容</li>
<li> 统计当前模式的匹配个数。 <code>:%s///gn</code></li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Python中的stdin stdout stderr]]></title>
    <link href="http://cs50Mu.github.io/blog/2014/10/07/io-in-python/"/>
    <updated>2014-10-07T10:29:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2014/10/07/io-in-python</id>
    <content type="html"><![CDATA[<p>看到一个题目，要求用Python实现linux中的命令tee的功能，tee的功能还是很简单的，就是把接收到的标准输入再输出到重定向和一个文件中。这些用Python来做应该不是什么难事，可是在Python里面怎么接收标准输入呢？</p>

<p>首先，有这样一个层级关系，<code>print</code>和<code>raw_input</code>这样的高级命令调用的是sys.stdin和sys.stdout，而sys.stdin和sys.stdout是file like object（类似于linux中一切设备皆文件），这一层的实现是Python的io模块。</p>

<p>下面通过两个例子可以清楚的看出print和sys.stdin和sys.stdout的关系。每个例子中第一句实现的效果跟后面的一沱实现的效果是一样一样的～</p>

<pre><code>######### stdout test ########
print 'hello world'

import sys
sys.stdout.write('hello world')

######### stdin test ########
print 'hi, %s' %raw_input('please input your name: ')

import sys
print 'please input your name: ',
name = sys.stdin.readline()[:-1]
print 'hi, %s' %name
#############################
</code></pre>

<p>比较好玩的事情是可以通过更改sys.stdin sys.stdout来实现类似linux中的重定向操作。比如默认stdout是终端，你可以在代码里通过<code>f = open(filename, 'w')</code> <code>sys.stdout = f</code>来把输出重定向到一个文件。</p>

<p>下面说下更底层的io模块。</p>

<p>像我们平时通过open等命令建立file like object后所使用的所有命令都是在io模块里实现的，比如write read readline seek flush等等。</p>

<p>io分三种类型：text I/O、binary I/O、raw I/O，以前总是傻傻分不清楚，现在终于理解了～</p>

<p>text I/O顾名思义，就是对我们人类来说能看到的、能识别的文字数据。无论什么数据都是以二进制的形式存储在计算机里的，但人类能识别的文字是以编码（assic、gbk、utf8）的形式存储在计算机里的，因为最终还要拿出来给人类读啊～～</p>

<p>binary I/O就是指所有非文本信息了，这类数据无需编码解码，也不用处理换行符，比如图片文件等。这个类型对应的open里的打开模式<code>'b'</code></p>

<p>raw I/O文档里说不常用，目前我也没理解它是干啥用的。。</p>

<p>最后，简陋的tee</p>

<pre><code>import sys 

def tee(filename):
    with open(filename, 'w') as f:
    for line in sys.stdin.readlines():
        sys.stdout.write(line)
        f.write(line)

if __name__ == '__main__':
    filename = sys.argv[1]
    tee(filename)
</code></pre>

<h3>参考</h3>

<ul>
<li><a href="http://en.wikibooks.org/wiki/Python_Programming/Input_and_Output">Python Programming/Input and Output</a></li>
<li><a href="http://woodpecker.org.cn/diveintopython/scripts_and_streams/stdin_stdout_stderr.html">标准输入、输出和错误</a></li>
<li><a href="https://docs.python.org/3.1/library/io.html#module-io">io — Core tools for working with streams</a></li>
<li><a href="http://5ydycm.blog.51cto.com/115934/304324">Python之sys模块小探</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[preparing for the job]]></title>
    <link href="http://cs50Mu.github.io/blog/2014/10/06/preparing-for-the-job/"/>
    <updated>2014-10-06T10:16:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2014/10/06/preparing-for-the-job</id>
    <content type="html"><![CDATA[<p>面试太渣，皆因毫无准备。</p>

<h3>多进程与多线程的区别</h3>

<ul>
<li>进程叫process，线程叫thread，cpu在任一时刻只能运行一个进程。一个进程可以包含多个线程</li>
<li>进程开销较大，线程开销较小</li>
<li>进程是<strong>资源分配</strong>的基本单位，线程是cpu调度的基本单位</li>
<li>进程有自己的地址空间，系统必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段，是一种非常昂贵的多任务工作方式。而一个进程中的线程，它们之间共享大部分数据，使用相同的地址空间，因此切换线程比切换进程快的多，也就是说线程之间的通信比较方便，但从另一方面来说，如何控制线程对共享数据的访问又是一个难点了。</li>
<li>多进程程序比多线程程序要健壮。一个进程挂了，对别的进程基本不会有影响，但一个线程挂了，很可能会导致进程内的其它线程也挂掉。</li>
</ul>


<p>参考：
<a href="http://blog.csdn.net/morewindows/article/details/7392749">秒杀多线程第一篇 多线程笔试面试题汇总</a></p>

<h3>Python如何进行内存管理？</h3>

<ul>
<li>在一个对象的引用计数减为0时，对此对象进行内存回收</li>
</ul>


<p>参考：
<a href="http://www.cnblogs.com/vamei/p/3232088.html">Python深入06 Python的内存管理</a></p>

<h3>Python里如何拷贝一个对象？</h3>

<ul>
<li>首先要知道为什么要复制对象，因为在Python中无论是把对象作为参数传递还是作为函数返回值，都是引用传递的。那当我们不想传递引用的时候就要复制一个全新的对象了。</li>
<li>复制分为浅复制和深复制。浅复制是指只复制对象，但对象里的元素仍然使用引用。深复制（deepcopy）就是完完全全的复制了。</li>
</ul>


<p>参考：
<a href="http://blog.csdn.net/sharkw/article/details/1934090">深复制和浅复制</a></p>

<h3>RE模块中search和match的区别</h3>

<ul>
<li>match只搜寻第一个是否满足，若满足返回它，若不满足，则返回None</li>
<li>search搜索字符串，返回它遇到的第一个满足条件的，而不仅仅是查看第一个
注意这两个命令都是只返回一个满足条件的，要想返回所有满足条件的，要用findall</li>
</ul>


<p>参考：
<a href="https://docs.python.org/2/library/re.html#search-vs-match">search vs match</a></p>

<h3>用Python匹配HTML tag的时候，<code>&lt;.*&gt;</code>和<code>&lt;.*?&gt;</code>有什么区别？</h3>

<p>贪婪模式和非贪婪模式。
The <code>'*'</code>, <code>'+'</code>, and <code>'?'</code> qualifiers are all greedy; they match as much text as possible. Sometimes this behaviour isn’t desired; if the RE <code>&lt;.*&gt;</code> is matched against <code>'&lt;H1&gt;title&lt;/H1&gt;'</code>, it will match the entire string, and not just <code>'&lt;H1&gt;'</code>. Adding <code>'?'</code> after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched. Using <code>.*?</code> in the previous expression will match only <code>'&lt;H1&gt;'</code>.</p>

<h3>python程序中文输出问题怎么解决？</h3>

<p>中文输出的问题都是由于编码问题。</p>

<p>中文字符串使用的编码与其所在的文件使用的编码一致。所以正确处理的步骤是：先用其原有编码decode成python内部的unicode，做了该做的处理后，什么时候想输出啦，这时候再使用encode，把它encode成任何想输出的编码形式。</p>

<h3>正则表达式匹配ip</h3>

<p><code>src = "security/afafsff/?ip=123.4.56.78&amp;id=45"</code>，请写一段代码用正则匹配出ip</p>

<pre><code>regx = re.compile(r'([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)')
m = regx.search("security/afafsff/?ip=123.4.56.78&amp;id=45")
m.groups()
('123', '4', '56', '78')
</code></pre>

<p>注意，使用groups可以返回找到的所有subgroups，非常方便。另外，group(0)返回整个匹配，group(1)返回第一个subgroup等等</p>

<h3>json</h3>

<p>写一段代码用json数据的处理方式获取{&ldquo;persons&rdquo;:[{&ldquo;name&rdquo;:&ldquo;yu&rdquo;,&ldquo;age&rdquo;:&ldquo;23&rdquo;},{&ldquo;name&rdquo;:&ldquo;zhang&rdquo;,&ldquo;age&rdquo;:&ldquo;34&rdquo;}]}这一段json中第一个人的名字。</p>

<pre><code>j = json.loads('{"persons":[{"name":"yu","age":"23"},{"name":"zhang","age":"34"}]}')
j.get('persons')[0]['name']
</code></pre>

<h3>平衡点</h3>

<p>比如int[] numbers = {1,3,5,7,8,25,4,20}; 25前面的总和为24，25后面的总和也是24，25这个点就是平衡点；假如一个数组中的元素，其前面的部分等于后面的部分，那么这个点的位序就是平衡点
我写出的版本，完全就是把题意翻译了一遍，能满足要求，效率应该不好</p>

<pre><code>def findMiddle(lst):
    for i in xrange(1, len(lst)-1):
    if sum(lst[:i]) == sum(lst[i+1:]):
        print i
</code></pre>

<p>看到别人的做法是，先算一遍总和，然后从左往右一个一个加，出现和一半的时候，说明找到平衡点了。</p>

<pre><code>def findMiddle2(lst):
    totle = sum(lst)

    add = 0 
    for i in xrange(0, len(lst)-1):
    add += lst[i]
    if totle - lst[i+1] == 2 * add:
        print i+1, lst[i+1]
</code></pre>

<h3>支配点</h3>

<p>支配数：数组中某个元素出现的次数大于数组总数的一半时就成为支配数，其所在位序成为支配点；比如int[] a = {3,3,1,2,3};3为支配数，0，1，4分别为支配点；</p>

<pre><code>def findDomain(lst):
    count = [ i for i,x in enumerate(lst) if lst.count(x) &gt; len(lst)//2 ]  # elegant solution
    if count:
    print lst[count[0]], count
</code></pre>

<h3>什么是PEP 8？</h3>

<p>Python编码规范</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[socks代理和http代理的区别]]></title>
    <link href="http://cs50Mu.github.io/blog/2014/10/05/socks-proxy-and-http-proxy/"/>
    <updated>2014-10-05T11:50:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2014/10/05/socks-proxy-and-http-proxy</id>
    <content type="html"><![CDATA[<p>一直傻傻分不清楚，都是因为平时很少接触，虽然翻墙常用，但也只是按教程一步一步来，并未知其所以然。</p>

<p>之前一直听别人说socks代理多么多么好，自己只是模模糊糊半懂不懂，现在终于切身体会到了一个好处，用socks代理后就没有证书问题的困扰了～～之前用的GoAgent使用的是http代理，每次访问https网站时，总是提示证书有问题，导入GoAgent的自带证书还是有问题，这下用了shadowsocks后一切都清净了。。为什么socks代理就这么牛逼呢？因为socks代理更底层，只负责发送接收数据，至于你是什么http ftp tcp udp它根本就不care。</p>

<ul>
<li>socks代理更底层，是在会话层；而http代理是在应用层。因此socks代理可以代理一切客户端的连接，而http代理只能代理使用http协议的客户端</li>
<li>由于更底层，不需要处理高级协议的细节，所以socks代理更快</li>
<li>socks协议分v4和v5版本，v4只能代理tcp协议，而v5什么协议都可以代理</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[binary search and spreadsheet numeration]]></title>
    <link href="http://cs50Mu.github.io/blog/2014/09/18/binary-search-and-spreadsheet-numeration/"/>
    <updated>2014-09-18T18:54:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2014/09/18/binary-search-and-spreadsheet-numeration</id>
    <content type="html"><![CDATA[<p>昨天去知道创宇的面试失败了，很感谢他们能给我这个机会。通过这次面试，我总算迈出了一步，更加明确了自己应该努力的方向。这次面试反映出的一个很严重的问题就是，手太生，学了这么长时间Python，竟然连一些常用的用法，命令都得现查文档。自己反思一下，没有自己动手写多少代码，这个是问题的关键。</p>

<p>面试我的雨哥人非常nice，面对我这么菜的表现没有一点不耐烦，他说的一句话让我印象深刻，“既然是有兴趣，平时就多花点时间，对得起兴趣这两个字”。我会的。</p>

<h2>二分法查找</h2>

<p>我想这个应该是最容易理解的算法了吧，我差点就在面试的时候完成了，well,almost&hellip;</p>

<p>思路很简单，因为给出的列表已经是排好顺序的了，因此直接找到中间的一个记为mid，若是要找的元素，任务完成。若mid比要找的元素大，好的，那么要找的元素肯定在start跟mid之间了，若mid比要找的元素小，那么要找的元素肯定在mid和end之间了。</p>

<figure class='code'><figcaption><span>binary-search</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">binarySearch</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="n">element</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">element</span> <span class="o">==</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Found, </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">mid</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">mid</span> <span class="o">==</span> <span class="n">start</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">element</span> <span class="o">==</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>  <span class="c"># 主要处理两个相邻的数的情况，这种情形下mid必然等于start</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;Found, </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="c"># 因此如果end（也就是mid+1）不等于element的话，则没找到</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;Not found&#39;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">element</span> <span class="o">&gt;</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="n">element</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">element</span> <span class="o">&lt;</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="n">element</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">binarySearch2</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="n">element</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">element</span> <span class="o">==</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Found, </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">mid</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;Not found&#39;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">element</span> <span class="o">&lt;</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">binarySearch2</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="n">element</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">element</span> <span class="o">&gt;</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">binarySearch2</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="n">element</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">binarySearch3</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="n">element</span><span class="p">):</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">end</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">element</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&#39;Found&#39;</span><span class="p">,</span> <span class="n">mid</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">element</span><span class="p">:</span>
</span><span class='line'>            <span class="n">end</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">element</span><span class="p">:</span>
</span><span class='line'>            <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Not found&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的方法一是我自己瞎想的ugly思路，方法三是我在一站式C编程上看到的，方法二是我根据方法三的思路用递归改写的</p>

<h2>spreadsheet numeration</h2>

<p>这个题目其实我之前在CodeForces上做过的，可惜没有理解它的真谛，虽然当时误打误撞做出来了，还是没有效果，现在遇到还是不会做，面试中雨哥一句话点醒我，“进制转换”，是啊，这个问题实质上就是十进制转换26进制的问题。那进制转换无非就是要做除法、取余。但是也不是这么简单，有一个比较tricky的问题，就是在转换26的倍数的时候，需要做一些特殊处理才行。</p>

<figure class='code'><figcaption><span>spreadsheet-numeration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">numTochar</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">ori</span> <span class="o">=</span> <span class="n">num</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">num</span><span class="p">:</span>
</span><span class='line'>        <span class="n">mod</span> <span class="o">=</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">26</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">mod</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">mod</span> <span class="o">=</span> <span class="mi">26</span>
</span><span class='line'>            <span class="n">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">/</span><span class="mi">26</span> <span class="o">-</span> <span class="mi">1</span> <span class="c"># special cases for &#39;Z&#39; </span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">num</span> <span class="o">/=</span> <span class="mi">26</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">mod</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">result</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">,</span><span class="n">ori</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">numTochar2</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">ori</span> <span class="o">=</span> <span class="n">num</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">num</span><span class="p">:</span>
</span><span class='line'>        <span class="n">mod</span> <span class="o">=</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">26</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">mod</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">mod</span> <span class="o">=</span> <span class="mi">26</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">-=</span> <span class="mi">1</span>       <span class="c"># a more elegant solution</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">/=</span> <span class="mi">26</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">mod</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">result</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">,</span><span class="n">ori</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法一是我自己捣鼓的，方法二是我在CodeForces上看到了，效果应该是一样的，都是为了在转换26的倍数的时候能够得出正确的结果，做出的一点特殊处理，不过显然后者更加优雅，每个数在除26之前先减1,这样既对于非26倍数的数没有影响，又能巧妙的处理26的倍数时的特殊情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structure and Interpretation of Computer Programs]]></title>
    <link href="http://cs50Mu.github.io/blog/2014/07/26/sicp/"/>
    <updated>2014-07-26T22:59:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2014/07/26/sicp</id>
    <content type="html"><![CDATA[<p>大名鼎鼎的SICP，下面是我在学习Berkeley的CS61A时做的笔记,非常有意思的一门课！</p>

<h2>高阶函数</h2>

<p>理解这玩意儿有时候确实挺费脑筋。。。下面这个trick花了好久才理解。。关键一开始没想明白返回的到底是匿名函数还是匿名函数的执行结果</p>

<pre><code>def cons(a, b):
    return lambda m: m(a,b) # 此处返回的是一个参数为m的匿名函数！！并且m是一个函数，m接受两个参数a和b

def car(p):
    return p(lambda x,y:x) # 

car(cons(1,2)) # 结果应该为1
</code></pre>

<p>以上代码大概类似于下面的代码：</p>

<pre><code>def fuck(func):
    def wrapper(a,b):
        return func(a,b)
    return wrapper

x = fuck(lambda x,y:x)
x(1,2) # 输出1
</code></pre>

<h2>递归  破钱</h2>

<p>下面的函数实现的功能是，给定一个数值，比方说100块，和一堆小面额的纸币，找出用这些小面额纸币来表示这100块总共有几种方法。其中link函数是用来制作链表的，first函数返回链表的第一个元素，rest函数返回链表的剩余所有元素。可以看到函数是用递归实现的，依据大概是这样的：100块的表示方法可以分为两类，一类方法中使用链表中的第一个面额，另一类方法中不使用第一个面额。就这么简单。。。神奇的是它竟然是能工作的！</p>

<pre><code>def count_change(amount, denominations):
    '''
    Return the number of ways to make change for amount
    '''
    if amount &lt; 0 or denominations == empty:
        return 0
    elif amount == 0:
        return 1
    using_coin = count_change(amount - first(denominations), denominations)
    not_using_coin = count_change(amount, rest(denominations))
    return using_coin + not_using_coin

denominations = link(50, link(25, link(10, link(5, link(1, empty)))))
&gt;&gt;&gt; print_linked_list(denominations)
&lt; 50 25 10 5 1 &gt;
&gt;&gt;&gt; count_change(100, denominations)
292
</code></pre>

<h2>ADT(Abstract Data type)</h2>

<p>ADT也属于抽象的一种，目的是控制复杂度，把复杂并且与下面要实现的功能无关的细节隐藏起来，只把几个关键的东西暴露给外部，要形成一个ADT一般需要一个constructor，一个selector，一个mutator等，有了这些，外部就可以用它们进一步实现别的功能了，像链表啊，树啊都属于ADT。其中，deep list和tree属于hierarchical data structure</p>

<h2>Implicit Sequences</h2>

<p>a sequence can be represented <strong>without</strong> each element being stored explicitly in the memory of the computer. That is, we can construct an object that provides access to all of the elements of some sequential dataset without computing all of those elements in advance and storing them. Instead, we compute elements on demand. 很巧妙的一种实现方式，不是把元素全部计算出来放在内存里等着去取，而是需要的时候才计算一个出来，这样可以节省大量的内存。这在计算机科学中叫lazy computation(lazy computation describes any program that delays the computation of a value until that value is needed). 但注意，实现这个强大功能的前提是sequential access(相对于random access)，也就是说只能按顺序依次获取，不能想取哪个就取哪个。嗯，iterator就是在这个背景下诞生了。。An iterator is an object that provides <strong>sequential access</strong> to an underlying sequential dataset. iterator就是为了方便处理那些具有内在顺序结构的数据而诞生的。The iterator abstraction has two components: a mechanism for retrieving the next element in some underlying series of elements and a mechanism for signaling that the end of the series has been reached and no further elements remain. In programming languages with built-in object systems, this abstraction typically corresponds to a particular interface that can be implemented by classes.</p>

<ul>
<li>iterators与iterables</li>
</ul>


<p>原来这两个不是一个东西。iterators需要实现<code>__next__</code>方法，是具体干活的。   <br/>
An object is iterable if it <strong>returns an iterator</strong> when its <code>__iter__</code> method is invoked. Iterable values represent data collections, and they provide a fixed representation that may produce more than one iterator. iterator和iterable类似于类和实例的关系吧,iterator负责实现模型、架构，iterable负责实例化。For example, an instance of the <code>Letters</code> class below represents a sequence of consecutive letters. Each time its <code>__iter__</code> method is invoked, a new <code>LetterIter</code> instance is constructed, which allows for sequential access to the contents of the sequence.</p>

<pre><code>&gt;&gt;&gt; class LetterIter:
    """An iterator over letters of the alphabet in ASCII order."""
    def __init__(self, start='a', end='e'):
        self.next_letter = start
        self.end = end
    def __next__(self):
        if self.next_letter == self.end:
        raise StopIteration
        letter = self.next_letter
        self.next_letter = chr(ord(letter)+1)
        return letter

&gt;&gt;&gt; class Letters:
    def __init__(self, start='a', end='e'):
        self.start = start
        self.end = end
    def __iter__(self):
        return LetterIter(self.start, self.end)

&gt;&gt;&gt; b_to_k = Letters('b', 'k')
&gt;&gt;&gt; first_iterator = b_to_k.__iter__()
&gt;&gt;&gt; next(first_iterator)
'b'
&gt;&gt;&gt; next(first_iterator)
'c'
&gt;&gt;&gt; second_iterator = iter(b_to_k)
&gt;&gt;&gt; second_iterator.__next__()
'b'
&gt;&gt;&gt; first_iterator.__next__()
'd'
&gt;&gt;&gt; first_iterator.__next__()
'e'
&gt;&gt;&gt; second_iterator.__next__()
'c'
&gt;&gt;&gt; second_iterator.__next__()
'd'
</code></pre>

<p>但是！在Python中<code>__next__</code>和<code>__iter__</code>方法是在同一个类中的！To use an iterator in a for loop, the iterator must also have an <code>__iter__</code> method. The <a href="http://docs.python.org/3/library/stdtypes.html#iterator-types">Iterator types</a> section of the Python docs suggest that an iterator have an <code>__iter__</code> method that returns the iterator itself, so that all iterators are iterable. 只要理解了<code>__iter__</code>方法的作用，也很容易理解的啦。</p>

<ul>
<li>Generators and Yield Statements</li>
</ul>


<p>Generators属于Iterator，a generator is an <strong>iterator</strong> returned by a special class of function called a generator function. Generator functions are distinguished from regular functions in that rather than containing return statements in their body, they use yield statement to return elements of a series.</p>

<p>The Letters and Positives objects above require us to introduce a new field self.current into our object to keep track of progress through the sequence. With simple sequences like those shown above, this can be done easily. With complex sequences, however, it can be quite difficult for the <code>__next__</code> method to save its place in the calculation. Generators allow us to define more complicated iterations by leveraging the features of the Python interpreter.</p>

<p>Generators do not use attributes of an object to track their progress through a series. Instead, they control the execution of the generator function, which runs until the next yield statement is executed each time the generator&rsquo;s <code>__next__</code> method is invoked. The Letters iterator can be implemented much more compactly using a generator function. 虽然实现的功能是一样的，但Generators与iterators的实现机理是不一样的，yield的机理貌似是coroutines，到底是个神马东东，待查。</p>

<pre><code>&gt;&gt;&gt; def letters_generator():
    current = 'a'
    while current &lt;= 'd':
        yield current
        current = chr(ord(current)+1)

&gt;&gt;&gt; for letter in letters_generator():
    print(letter)
a
b
c
d
</code></pre>

<p>Even though we never explicitly defined <code>__iter__</code> or <code>__next__</code> methods, the yield statement indicates that we are defining a generator function. When called, a generator function doesn&rsquo;t return a particular yielded value, but instead a generator (which is a type of iterator) that itself can return the yielded values. A generator object has <code>__iter__</code> and <code>__next__</code> methods, and each call to <code>__next__</code> continues execution of the generator function from wherever it left off previously until another yield statement is executed.</p>

<p>The first time <code>__next__</code> is called, the program executes statements from the body of the <code>letters_generator</code> function until it encounters the yield statement. Then, it pauses and returns the value of current. yield statements do not destroy the newly created environment, they preserve it for later. When <code>__next__</code> is called again, execution resumes where it left off. The values of current and of any other bound names in the scope of <code>letters_generator</code> are preserved across subsequent calls to <code>__next__</code>.</p>

<p>这样，可以用yield语句来简化iterables的写法</p>

<pre><code>&gt;&gt;&gt; class LettersWithYield:
    def __init__(self, start='a', end='e'):
        self.start = start
        self.end = end
    def __iter__(self):
        next_letter = self.start
        while next_letter &lt; self.end:
        yield next_letter
        next_letter = chr(ord(next_letter)+1)
</code></pre>

<p>以前没有Generators的时候，还需要定义一个<code>__next__</code>方法来生成iterator，然后用<code>__iter__</code>方法来返回self，这下因为yield本身返回的就是一个Generator(也属于Iterator)，所以无需<code>__next__</code>方法来生成iterator。</p>

<h2>Mutation in for loops</h2>

<p>如果在for循环中对对象做了修改（增加或删除），会出现无法预测的结果</p>

<pre><code># Demo: Mutation in For Loops
# lst = list(range(10, 20))
# for item in lst:
#     print(item)
#     lst.remove(item)
# lst
# 下面是解决办法, 不过原理未搞懂，待查
class BetterList(list):
    def __iter__(self):
    return list.__iter__(self[:])
</code></pre>

<h2>nonlocal与list</h2>

<p>看下面两段代码</p>

<pre><code>def make_accumulator():
    """Return an accumulator function that takes a single numeric argument and
    accumulates that argument into total, then returns total.
    """
    total = []
    def accumulator(amount):
    total.append(amount)
    return sum(total)
    return accumulator

def make_accumulator_nonlocal():
    """Return an accumulator function that takes a single numeric argument and
    accumulates that argument into total, then returns total.
    """
    total = 0
    def accumulator(amount):
    nonlocal total
    total += amount
    return total
    return accumulator
</code></pre>

<p>为何单个变量(total)在&#8221;全局&#8221;访问的时候需要nonlocal参数，而列表就不用了呢？</p>

<h2>format method of strings</h2>

<pre><code>&gt;&gt;&gt; 'I {0}, you {0}, we all {0} for {1}!'.format('scream', 'ice cream')
'I scream, you scream, we all scream for ice cream!'
</code></pre>

<h2>Generic Functions</h2>

<p>Generic functions are methods or functions that apply to arguments of different types. 我理解就是不管对象类型是不是一样，都可以用这个通用函数来做运算。Generic functions主要有下面三种实现方式：
&ndash; Interfaces
&ndash; Type dispatching
&ndash; Coercion</p>

<h2>Memoization</h2>

<p>Keep track of all the calls we have ever made to fib and their answers. Then when we made a repeated recursive call, we immediately return the answer.</p>

<h2>Huffman Encoding</h2>

<p>一种可变编码方式，可针对词频进行优化编码，出现次数多的字母用相对小的位数来编码，出现次数多的字母用相对多的位数来编码，这样相对于固定位编码方式可节省存储空间。  <br/>
使用方法：</p>

<ul>
<li>统计字母出现频率，并据此创建霍夫曼二叉树。创建的方法就是对给定的字母、频率，不停的merge掉频率最小的两个，并根据这两个生成一个新的HuffmanTree，它的频率为那两个频率最小的频率之和，以此直至只剩下两个HuffmanTree为止.</li>
<li>编码</li>
<li>解码
编码和解码部分可用递归优雅的实现

<h2>Scheme</h2></li>
<li>区分symbol和string. When you type things in the interpreter, Scheme will evaluate it. The rule for evaluating a symbol is to get the value bound to that symbol. This is one difference between strings and symbols&mdash;symbols don&rsquo;t evaluate to themselves(which strings do). However, as you saw above, when you type in &lsquo;a, you get a. This is because when you use single quote, you&rsquo;re telling Scheme <strong>not to follow</strong> the normal rules of the evaluation and just have the symbol return as itself.</li>
<li>Special Forms. 类似于其它语言中的关键字，比如define if and or等等</li>
<li>Lambdas. 语法： <code>(lambda (&lt;PARAMETERS&gt;) &lt;EXPR&gt;)</code></li>
<li>Functions. 语法：<code>(define (&lt;FUNCTIONNAME&gt; &lt;PARAMETERS&gt;) &lt;EXPR&gt;)</code>. Python will automatically transform it to <code>(define &lt;FUNCTIONNAME&gt; (lambda (&lt;PARAMETERS&gt;) &lt;EXPR&gt;)</code> for you.所以在Scheme中，lambda更基础.</li>
<li>关键字let. 语法：
  (let ( (<SYMBOL1> <EXPR1>)
      &hellip;
      (<SYMBOLN> <EXPRN>) )
      <BODY> )
它等价于：<code>( (lambda (&lt;SYMBOL1&gt; ... &lt;SYMBOLN&gt;) &lt;BODY&gt;) &lt;EXPR1&gt; ... &lt;EXPRN&gt;)</code></li>
<li>Pairs. 创建：<code>(define a (cons 1 2))</code> 获取： <code>(car a)</code> <code>(cdr a)</code></li>
<li>List. A List is a specific kind of Pair that is either nil(an empty list) or a Pair whose cdr is another List. 比如，(cons 1 (cons 2 nil))，它可以简写成&#8217;(1 2)，检查List是否为空可用null?语句</li>
</ul>


<h2>Tail Recursion 尾递归</h2>

<p>是对递归的一种优化，我们都知道，一般线性递归在新的调用之前需要在堆栈中保存当前调用的信息，这样随着函数调用的增多，对内存的占用会越来越大，而尾递归能够实现这一次的调用使用的堆栈空间直接覆盖上次用过的，因此虽然函数调用在不断进行，但对内存的占用却是不变的！（linuxfish注：看了一堆介绍，我肿么觉得尾递归有点过程语言中循环的感觉，是不是因为函数式编程中没有循环，才用尾递归的？）</p>

<p>注意，要区分尾递归语法和尾递归优化，也就是说，你可以把递归写成尾递归的形式，但底层（解释器、编译器）是否给你优化就不一定了。比如，Python可以写成尾递归的形式，但是没用，照样会stackoverflow，因为解释器并不支持。</p>

<h2>Streams</h2>

<p>这应该是Python中generator的鼻祖了吧。Streams are a clever idea that allows one to use sequence manipulations without incurring the costs of manipulating sequences as list. With streams we can achieve the best of both worlds: We can formulate programs elegantly as sequences manipulations, while attaining the efficiency of <strong>incremental computation</strong>. The basic idea is to arrange to construct a stream only partially, and to pass the partial construction to the program that consumes the stream. If the consumer attempts to access a part of the stream that has not yet been constructed, the stream will automatically construct just enough more of itself to produce the required part, thus preserving the illusion that the entire stream exists. In other words. In other words, although we will write programs as if we were processing complete sequences, we design our stream implemention to automatically and transparently interleave the construction of the stream with its use.感觉这玩意儿纯粹是Schemer们妄图所有问题都用list pair来解决，发现不行后又整出来的一个东东。这也是所谓的函数式语言的懒惰特性，所谓懒就是不到万不得已不动弹。。而不是傻乎乎的一下子就把整个list都计算出来。</p>

<h2>Declarative Programming</h2>

<p>比如SQL语言</p>

<p>data values are often stored in large repositories called databases. A database consists of a data store containing structured data values and an interface for retrieving subsets of the data based on their characteristics. Each value stored in a database is called a record. Records are typically retrieved via a query, which is an expression in a query programming language. By far the most ubiquitous query language in use is called Structure Query Language or SQL.</p>

<p>SQL is an example of a declarative programming language. Expressions do not <strong>describe computations directly</strong>, but instead state the form of the <strong>result</strong> of some computation. It is the role of the <strong>query interpreter</strong> of the database system to design and perform a computational process to produce such a result.</p>

<p>This interaction differs substantially from the procedural programming paradigm of Python or Scheme. In Python, <strong>computational processes are described directly by the programmer.</strong> A declarative language specifies the form of the result, but abstracts away procedural details.</p>

<h2>Concurrency 并行</h2>

<ul>
<li>并行是一个现实问题，生活中经常会遇到，又是一个提升效率的好办法，并行办事比串行等待效率要高很多！</li>
<li>由于线程并行所导致的问题可以通过引入锁的机制来解决，不过要注意防止死锁现象。</li>
<li>还可以通过Message Passing来解决</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[捣鼓VPS翻墙]]></title>
    <link href="http://cs50Mu.github.io/blog/2014/07/14/my-first-vps/"/>
    <updated>2014-07-14T22:19:00+08:00</updated>
    <id>http://cs50Mu.github.io/blog/2014/07/14/my-first-vps</id>
    <content type="html"><![CDATA[<p>在学校论坛上看到有人介绍在vps上搭建shadowsocks服务器来翻墙，看到他推荐的vps很便宜，一年才20多，于是立马也想买一个了，其实以前就想折腾vps的，无奈找到的vps价格都太高，一个月要几百块神马的，像我这么小气的人肿么可能舍得。。不过，这个实在是太便宜了啊，虽然配置是最低的了，72M内存，2G硬盘，但一个月有100G的流量，对于翻墙来说够用了，果断注册下单购买，只支持PayPal支付，于是又注册PayPal，在这上面折腾了很久，一开始注册成中国版的了，结果提示无法跨境支付，放狗搜索后发现，需要注册国际版的，以为还要审核神马的，结果直接绑定银行卡后就可以支付了，很方便啊！</p>

<p>可是才用一天就被墙了！！我目前使用的是长城宽带的服务，ssh都无法登陆了，但后来发现使用学校自己的外网还是可以用的，学校的外网应该是用的联通的服务，后来我到V2EX上问了下发现有人用长城宽带的服务也有类似的问题，该死的长城宽带！</p>

<h2>更新（20141002）</h2>

<p>不久前听人说Bandwagon出加州机房了，一直懒得弄，今天花时间看了下，果然有加州机房了，果断迁移过去，给换了个新ip，然后shadowsocks不能用了，一开始以为是shadowsocks服务器端没开，后来发现是服务器端的设置里ip也需要更新下才行。</p>

<p>正好记录下shadowsocks服务器端的配置，省得下次再忘。</p>

<ul>
<li>shadowsocks在服务器端是以daemon形式运行的。daemon脚本在<code>/etc/init.d/shadowsocks</code>，配置文件在<code>/etc/shadowsocks/config.json</code></li>
<li>要启动/关闭/重启shadowsocks，只需在命令行执行<code>/etc/init.d/shadowsocks start/stop/restart</code>，它默认开始是自启动的。</li>
<li>刚刚才知道，原来shadowsocks是socks代理，因此可以无压力访问https网站，再也不会遇到GoAgent一样的证书问题了～～哈哈，真好</li>
</ul>


<p>对了，火狐代理插件换成foxyproxy了，autoproxy已经好久不更新，基本无法使用了，之前一直迟疑不想换是因为听说foxyproxy配置比较麻烦，今天试了试才发现对于经常折腾的人来说根本就不是事～～ foxyproxy也支持订阅gfwlist列表，于是生活又美好起来了～～</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/madeye/shadowsocks-libev">shadowsocks-libev</a></li>
<li><a href="http://www.lucong.com.cn/lulu/centos-debian-shadowsocks-libev.html">CentOS、Debian下搭建shadowsocks-libev服务端</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
